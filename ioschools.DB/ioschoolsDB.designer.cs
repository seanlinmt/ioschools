#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ioschools.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class ioschoolsDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserteca(eca instance);
    partial void Updateeca(eca instance);
    partial void Deleteeca(eca instance);
    partial void InsertELMAH_Error(ELMAH_Error instance);
    partial void UpdateELMAH_Error(ELMAH_Error instance);
    partial void DeleteELMAH_Error(ELMAH_Error instance);
    partial void Insertexam_class(exam_class instance);
    partial void Updateexam_class(exam_class instance);
    partial void Deleteexam_class(exam_class instance);
    partial void Inserthomework_class(homework_class instance);
    partial void Updatehomework_class(homework_class instance);
    partial void Deletehomework_class(homework_class instance);
    partial void Insertmail(mail instance);
    partial void Updatemail(mail instance);
    partial void Deletemail(mail instance);
    partial void Insertsibling(sibling instance);
    partial void Updatesibling(sibling instance);
    partial void Deletesibling(sibling instance);
    partial void Insertuser_file(user_file instance);
    partial void Updateuser_file(user_file instance);
    partial void Deleteuser_file(user_file instance);
    partial void Inserthomework_file(homework_file instance);
    partial void Updatehomework_file(homework_file instance);
    partial void Deletehomework_file(homework_file instance);
    partial void Insertfeedback(feedback instance);
    partial void Updatefeedback(feedback instance);
    partial void Deletefeedback(feedback instance);
    partial void Insertregistration_notification(registration_notification instance);
    partial void Updateregistration_notification(registration_notification instance);
    partial void Deleteregistration_notification(registration_notification instance);
    partial void Insertchangelog(changelog instance);
    partial void Updatechangelog(changelog instance);
    partial void Deletechangelog(changelog instance);
    partial void Insertstudents_guardian(students_guardian instance);
    partial void Updatestudents_guardian(students_guardian instance);
    partial void Deletestudents_guardian(students_guardian instance);
    partial void Insertpage(page instance);
    partial void Updatepage(page instance);
    partial void Deletepage(page instance);
    partial void Insertblog_file(blog_file instance);
    partial void Updateblog_file(blog_file instance);
    partial void Deleteblog_file(blog_file instance);
    partial void Insertblog_image(blog_image instance);
    partial void Updateblog_image(blog_image instance);
    partial void Deleteblog_image(blog_image instance);
    partial void Insertuser_parent(user_parent instance);
    partial void Updateuser_parent(user_parent instance);
    partial void Deleteuser_parent(user_parent instance);
    partial void Insertblog(blog instance);
    partial void Updateblog(blog instance);
    partial void Deleteblog(blog instance);
    partial void Insertregistration(registration instance);
    partial void Updateregistration(registration instance);
    partial void Deleteregistration(registration instance);
    partial void Insertclasses_teachers_allocated(classes_teachers_allocated instance);
    partial void Updateclasses_teachers_allocated(classes_teachers_allocated instance);
    partial void Deleteclasses_teachers_allocated(classes_teachers_allocated instance);
    partial void Insertclasses_students_allocated(classes_students_allocated instance);
    partial void Updateclasses_students_allocated(classes_students_allocated instance);
    partial void Deleteclasses_students_allocated(classes_students_allocated instance);
    partial void Insertuser_image(user_image instance);
    partial void Updateuser_image(user_image instance);
    partial void Deleteuser_image(user_image instance);
    partial void Inserteca_student(eca_student instance);
    partial void Updateeca_student(eca_student instance);
    partial void Deleteeca_student(eca_student instance);
    partial void Insertschool_term(school_term instance);
    partial void Updateschool_term(school_term instance);
    partial void Deleteschool_term(school_term instance);
    partial void Insertattendance_term(attendance_term instance);
    partial void Updateattendance_term(attendance_term instance);
    partial void Deleteattendance_term(attendance_term instance);
    partial void Insertstudents_remark(students_remark instance);
    partial void Updatestudents_remark(students_remark instance);
    partial void Deletestudents_remark(students_remark instance);
    partial void Insertexam_mark(exam_mark instance);
    partial void Updateexam_mark(exam_mark instance);
    partial void Deleteexam_mark(exam_mark instance);
    partial void Insertuser_staff(user_staff instance);
    partial void Updateuser_staff(user_staff instance);
    partial void Deleteuser_staff(user_staff instance);
    partial void Insertsubject(subject instance);
    partial void Updatesubject(subject instance);
    partial void Deletesubject(subject instance);
    partial void Insertsubject_teacher(subject_teacher instance);
    partial void Updatesubject_teacher(subject_teacher instance);
    partial void Deletesubject_teacher(subject_teacher instance);
    partial void Insertexam_template_subject(exam_template_subject instance);
    partial void Updateexam_template_subject(exam_template_subject instance);
    partial void Deleteexam_template_subject(exam_template_subject instance);
    partial void Insertexam_subject(exam_subject instance);
    partial void Updateexam_subject(exam_subject instance);
    partial void Deleteexam_subject(exam_subject instance);
    partial void Insertschool(school instance);
    partial void Updateschool(school instance);
    partial void Deleteschool(school instance);
    partial void Inserthomework_answer(homework_answer instance);
    partial void Updatehomework_answer(homework_answer instance);
    partial void Deletehomework_answer(homework_answer instance);
    partial void Inserthomework(homework instance);
    partial void Updatehomework(homework instance);
    partial void Deletehomework(homework instance);
    partial void Inserthomework_student(homework_student instance);
    partial void Updatehomework_student(homework_student instance);
    partial void Deletehomework_student(homework_student instance);
    partial void Insertleave(leave instance);
    partial void Updateleave(leave instance);
    partial void Deleteleave(leave instance);
    partial void Insertleaves_allocated(leaves_allocated instance);
    partial void Updateleaves_allocated(leaves_allocated instance);
    partial void Deleteleaves_allocated(leaves_allocated instance);
    partial void Insertleaves_taken(leaves_taken instance);
    partial void Updateleaves_taken(leaves_taken instance);
    partial void Deleteleaves_taken(leaves_taken instance);
    partial void Insertemployment(employment instance);
    partial void Updateemployment(employment instance);
    partial void Deleteemployment(employment instance);
    partial void Insertexam_template(exam_template instance);
    partial void Updateexam_template(exam_template instance);
    partial void Deleteexam_template(exam_template instance);
    partial void Insertexam(exam instance);
    partial void Updateexam(exam instance);
    partial void Deleteexam(exam instance);
    partial void Insertschool_class(school_class instance);
    partial void Updateschool_class(school_class instance);
    partial void Deleteschool_class(school_class instance);
    partial void Insertschool_year(school_year instance);
    partial void Updateschool_year(school_year instance);
    partial void Deleteschool_year(school_year instance);
    partial void Insertgrades_method(grades_method instance);
    partial void Updategrades_method(grades_method instance);
    partial void Deletegrades_method(grades_method instance);
    partial void Insertgrades_rule(grades_rule instance);
    partial void Updategrades_rule(grades_rule instance);
    partial void Deletegrades_rule(grades_rule instance);
    partial void Insertstudents_discipline(students_discipline instance);
    partial void Updatestudents_discipline(students_discipline instance);
    partial void Deletestudents_discipline(students_discipline instance);
    partial void Insertconduct(conduct instance);
    partial void Updateconduct(conduct instance);
    partial void Deleteconduct(conduct instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertattendance(attendance instance);
    partial void Updateattendance(attendance instance);
    partial void Deleteattendance(attendance instance);
    partial void Insertfees_type(fees_type instance);
    partial void Updatefees_type(fees_type instance);
    partial void Deletefees_type(fees_type instance);
    partial void Insertfees_template(fees_template instance);
    partial void Updatefees_template(fees_template instance);
    partial void Deletefees_template(fees_template instance);
    partial void Insertfees_reminder(fees_reminder instance);
    partial void Updatefees_reminder(fees_reminder instance);
    partial void Deletefees_reminder(fees_reminder instance);
    partial void Insertfee(fee instance);
    partial void Updatefee(fee instance);
    partial void Deletefee(fee instance);
    partial void Insertcalendar(calendar instance);
    partial void Updatecalendar(calendar instance);
    partial void Deletecalendar(calendar instance);
    #endregion
		
		public ioschoolsDBDataContext() : 
				base(global::ioschools.DB.Properties.Settings.Default.tConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ioschoolsDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ioschoolsDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ioschoolsDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ioschoolsDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<eca> ecas
		{
			get
			{
				return this.GetTable<eca>();
			}
		}
		
		public System.Data.Linq.Table<ELMAH_Error> ELMAH_Errors
		{
			get
			{
				return this.GetTable<ELMAH_Error>();
			}
		}
		
		public System.Data.Linq.Table<exam_class> exam_classes
		{
			get
			{
				return this.GetTable<exam_class>();
			}
		}
		
		public System.Data.Linq.Table<homework_class> homework_classes
		{
			get
			{
				return this.GetTable<homework_class>();
			}
		}
		
		public System.Data.Linq.Table<mail> mails
		{
			get
			{
				return this.GetTable<mail>();
			}
		}
		
		public System.Data.Linq.Table<sibling> siblings
		{
			get
			{
				return this.GetTable<sibling>();
			}
		}
		
		public System.Data.Linq.Table<user_file> user_files
		{
			get
			{
				return this.GetTable<user_file>();
			}
		}
		
		public System.Data.Linq.Table<homework_file> homework_files
		{
			get
			{
				return this.GetTable<homework_file>();
			}
		}
		
		public System.Data.Linq.Table<feedback> feedbacks
		{
			get
			{
				return this.GetTable<feedback>();
			}
		}
		
		public System.Data.Linq.Table<registration_notification> registration_notifications
		{
			get
			{
				return this.GetTable<registration_notification>();
			}
		}
		
		public System.Data.Linq.Table<changelog> changelogs
		{
			get
			{
				return this.GetTable<changelog>();
			}
		}
		
		public System.Data.Linq.Table<students_guardian> students_guardians
		{
			get
			{
				return this.GetTable<students_guardian>();
			}
		}
		
		public System.Data.Linq.Table<page> pages
		{
			get
			{
				return this.GetTable<page>();
			}
		}
		
		public System.Data.Linq.Table<blog_file> blog_files
		{
			get
			{
				return this.GetTable<blog_file>();
			}
		}
		
		public System.Data.Linq.Table<blog_image> blog_images
		{
			get
			{
				return this.GetTable<blog_image>();
			}
		}
		
		public System.Data.Linq.Table<user_parent> user_parents
		{
			get
			{
				return this.GetTable<user_parent>();
			}
		}
		
		public System.Data.Linq.Table<blog> blogs
		{
			get
			{
				return this.GetTable<blog>();
			}
		}
		
		public System.Data.Linq.Table<registration> registrations
		{
			get
			{
				return this.GetTable<registration>();
			}
		}
		
		public System.Data.Linq.Table<classes_teachers_allocated> classes_teachers_allocateds
		{
			get
			{
				return this.GetTable<classes_teachers_allocated>();
			}
		}
		
		public System.Data.Linq.Table<classes_students_allocated> classes_students_allocateds
		{
			get
			{
				return this.GetTable<classes_students_allocated>();
			}
		}
		
		public System.Data.Linq.Table<user_image> user_images
		{
			get
			{
				return this.GetTable<user_image>();
			}
		}
		
		public System.Data.Linq.Table<eca_student> eca_students
		{
			get
			{
				return this.GetTable<eca_student>();
			}
		}
		
		public System.Data.Linq.Table<school_term> school_terms
		{
			get
			{
				return this.GetTable<school_term>();
			}
		}
		
		public System.Data.Linq.Table<attendance_term> attendance_terms
		{
			get
			{
				return this.GetTable<attendance_term>();
			}
		}
		
		public System.Data.Linq.Table<students_remark> students_remarks
		{
			get
			{
				return this.GetTable<students_remark>();
			}
		}
		
		public System.Data.Linq.Table<exam_mark> exam_marks
		{
			get
			{
				return this.GetTable<exam_mark>();
			}
		}
		
		public System.Data.Linq.Table<user_staff> user_staffs
		{
			get
			{
				return this.GetTable<user_staff>();
			}
		}
		
		public System.Data.Linq.Table<subject> subjects
		{
			get
			{
				return this.GetTable<subject>();
			}
		}
		
		public System.Data.Linq.Table<subject_teacher> subject_teachers
		{
			get
			{
				return this.GetTable<subject_teacher>();
			}
		}
		
		public System.Data.Linq.Table<exam_template_subject> exam_template_subjects
		{
			get
			{
				return this.GetTable<exam_template_subject>();
			}
		}
		
		public System.Data.Linq.Table<exam_subject> exam_subjects
		{
			get
			{
				return this.GetTable<exam_subject>();
			}
		}
		
		public System.Data.Linq.Table<school> schools
		{
			get
			{
				return this.GetTable<school>();
			}
		}
		
		public System.Data.Linq.Table<homework_answer> homework_answers
		{
			get
			{
				return this.GetTable<homework_answer>();
			}
		}
		
		public System.Data.Linq.Table<homework> homeworks
		{
			get
			{
				return this.GetTable<homework>();
			}
		}
		
		public System.Data.Linq.Table<homework_student> homework_students
		{
			get
			{
				return this.GetTable<homework_student>();
			}
		}
		
		public System.Data.Linq.Table<leave> leaves
		{
			get
			{
				return this.GetTable<leave>();
			}
		}
		
		public System.Data.Linq.Table<leaves_allocated> leaves_allocateds
		{
			get
			{
				return this.GetTable<leaves_allocated>();
			}
		}
		
		public System.Data.Linq.Table<leaves_taken> leaves_takens
		{
			get
			{
				return this.GetTable<leaves_taken>();
			}
		}
		
		public System.Data.Linq.Table<employment> employments
		{
			get
			{
				return this.GetTable<employment>();
			}
		}
		
		public System.Data.Linq.Table<exam_template> exam_templates
		{
			get
			{
				return this.GetTable<exam_template>();
			}
		}
		
		public System.Data.Linq.Table<exam> exams
		{
			get
			{
				return this.GetTable<exam>();
			}
		}
		
		public System.Data.Linq.Table<school_class> school_classes
		{
			get
			{
				return this.GetTable<school_class>();
			}
		}
		
		public System.Data.Linq.Table<school_year> school_years
		{
			get
			{
				return this.GetTable<school_year>();
			}
		}
		
		public System.Data.Linq.Table<grades_method> grades_methods
		{
			get
			{
				return this.GetTable<grades_method>();
			}
		}
		
		public System.Data.Linq.Table<grades_rule> grades_rules
		{
			get
			{
				return this.GetTable<grades_rule>();
			}
		}
		
		public System.Data.Linq.Table<students_discipline> students_disciplines
		{
			get
			{
				return this.GetTable<students_discipline>();
			}
		}
		
		public System.Data.Linq.Table<conduct> conducts
		{
			get
			{
				return this.GetTable<conduct>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<attendance> attendances
		{
			get
			{
				return this.GetTable<attendance>();
			}
		}
		
		public System.Data.Linq.Table<fees_type> fees_types
		{
			get
			{
				return this.GetTable<fees_type>();
			}
		}
		
		public System.Data.Linq.Table<fees_template> fees_templates
		{
			get
			{
				return this.GetTable<fees_template>();
			}
		}
		
		public System.Data.Linq.Table<fees_reminder> fees_reminders
		{
			get
			{
				return this.GetTable<fees_reminder>();
			}
		}
		
		public System.Data.Linq.Table<fee> fees
		{
			get
			{
				return this.GetTable<fee>();
			}
		}
		
		public System.Data.Linq.Table<calendar> calendars
		{
			get
			{
				return this.GetTable<calendar>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ecas")]
	public partial class eca : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _schoolid;
		
		private string _name;
		
		private EntitySet<eca_student> _eca_students;
		
		private EntitySet<attendance> _attendances;
		
		private EntityRef<school> _school;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public eca()
		{
			this._eca_students = new EntitySet<eca_student>(new Action<eca_student>(this.attach_eca_students), new Action<eca_student>(this.detach_eca_students));
			this._attendances = new EntitySet<attendance>(new Action<attendance>(this.attach_attendances), new Action<attendance>(this.detach_attendances));
			this._school = default(EntityRef<school>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eca_eca_student", Storage="_eca_students", ThisKey="id", OtherKey="ecaid")]
		public EntitySet<eca_student> eca_students
		{
			get
			{
				return this._eca_students;
			}
			set
			{
				this._eca_students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eca_attendance", Storage="_attendances", ThisKey="id", OtherKey="ecaid")]
		public EntitySet<attendance> attendances
		{
			get
			{
				return this._attendances;
			}
			set
			{
				this._attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_eca", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.ecas.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.ecas.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_eca_students(eca_student entity)
		{
			this.SendPropertyChanging();
			entity.eca = this;
		}
		
		private void detach_eca_students(eca_student entity)
		{
			this.SendPropertyChanging();
			entity.eca = null;
		}
		
		private void attach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.eca = this;
		}
		
		private void detach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.eca = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ELMAH_Error")]
	public partial class ELMAH_Error : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ErrorId;
		
		private string _Application;
		
		private string _Host;
		
		private string _Type;
		
		private string _Source;
		
		private string _Message;
		
		private string _User;
		
		private int _StatusCode;
		
		private System.DateTime _TimeUtc;
		
		private int _Sequence;
		
		private string _AllXml;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIdChanging(System.Guid value);
    partial void OnErrorIdChanged();
    partial void OnApplicationChanging(string value);
    partial void OnApplicationChanged();
    partial void OnHostChanging(string value);
    partial void OnHostChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnStatusCodeChanging(int value);
    partial void OnStatusCodeChanged();
    partial void OnTimeUtcChanging(System.DateTime value);
    partial void OnTimeUtcChanged();
    partial void OnSequenceChanging(int value);
    partial void OnSequenceChanged();
    partial void OnAllXmlChanging(string value);
    partial void OnAllXmlChanged();
    #endregion
		
		public ELMAH_Error()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ErrorId
		{
			get
			{
				return this._ErrorId;
			}
			set
			{
				if ((this._ErrorId != value))
				{
					this.OnErrorIdChanging(value);
					this.SendPropertyChanging();
					this._ErrorId = value;
					this.SendPropertyChanged("ErrorId");
					this.OnErrorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Application
		{
			get
			{
				return this._Application;
			}
			set
			{
				if ((this._Application != value))
				{
					this.OnApplicationChanging(value);
					this.SendPropertyChanging();
					this._Application = value;
					this.SendPropertyChanged("Application");
					this.OnApplicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Host", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Host
		{
			get
			{
				return this._Host;
			}
			set
			{
				if ((this._Host != value))
				{
					this.OnHostChanging(value);
					this.SendPropertyChanging();
					this._Host = value;
					this.SendPropertyChanged("Host");
					this.OnHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCode", DbType="Int NOT NULL")]
		public int StatusCode
		{
			get
			{
				return this._StatusCode;
			}
			set
			{
				if ((this._StatusCode != value))
				{
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeUtc", DbType="DateTime NOT NULL")]
		public System.DateTime TimeUtc
		{
			get
			{
				return this._TimeUtc;
			}
			set
			{
				if ((this._TimeUtc != value))
				{
					this.OnTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._TimeUtc = value;
					this.SendPropertyChanged("TimeUtc");
					this.OnTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllXml", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AllXml
		{
			get
			{
				return this._AllXml;
			}
			set
			{
				if ((this._AllXml != value))
				{
					this.OnAllXmlChanging(value);
					this.SendPropertyChanging();
					this._AllXml = value;
					this.SendPropertyChanged("AllXml");
					this.OnAllXmlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.exam_classes")]
	public partial class exam_class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _classid;
		
		private long _examid;
		
		private EntityRef<exam> _exam;
		
		private EntityRef<school_class> _school_class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnclassidChanging(int value);
    partial void OnclassidChanged();
    partial void OnexamidChanging(long value);
    partial void OnexamidChanged();
    #endregion
		
		public exam_class()
		{
			this._exam = default(EntityRef<exam>);
			this._school_class = default(EntityRef<school_class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classid", DbType="Int NOT NULL")]
		public int classid
		{
			get
			{
				return this._classid;
			}
			set
			{
				if ((this._classid != value))
				{
					if (this._school_class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassidChanging(value);
					this.SendPropertyChanging();
					this._classid = value;
					this.SendPropertyChanged("classid");
					this.OnclassidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_examid", DbType="BigInt NOT NULL")]
		public long examid
		{
			get
			{
				return this._examid;
			}
			set
			{
				if ((this._examid != value))
				{
					if (this._exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnexamidChanging(value);
					this.SendPropertyChanging();
					this._examid = value;
					this.SendPropertyChanged("examid");
					this.OnexamidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_exam_class", Storage="_exam", ThisKey="examid", OtherKey="id", IsForeignKey=true)]
		public exam exam
		{
			get
			{
				return this._exam.Entity;
			}
			set
			{
				exam previousValue = this._exam.Entity;
				if (((previousValue != value) 
							|| (this._exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._exam.Entity = null;
						previousValue.exam_classes.Remove(this);
					}
					this._exam.Entity = value;
					if ((value != null))
					{
						value.exam_classes.Add(this);
						this._examid = value.id;
					}
					else
					{
						this._examid = default(long);
					}
					this.SendPropertyChanged("exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_exam_class", Storage="_school_class", ThisKey="classid", OtherKey="id", IsForeignKey=true)]
		public school_class school_class
		{
			get
			{
				return this._school_class.Entity;
			}
			set
			{
				school_class previousValue = this._school_class.Entity;
				if (((previousValue != value) 
							|| (this._school_class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_class.Entity = null;
						previousValue.exam_classes.Remove(this);
					}
					this._school_class.Entity = value;
					if ((value != null))
					{
						value.exam_classes.Add(this);
						this._classid = value.id;
					}
					else
					{
						this._classid = default(int);
					}
					this.SendPropertyChanged("school_class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.homework_classes")]
	public partial class homework_class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _homeworkid;
		
		private int _classid;
		
		private EntityRef<homework> _homework;
		
		private EntityRef<school_class> _school_class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnhomeworkidChanging(long value);
    partial void OnhomeworkidChanged();
    partial void OnclassidChanging(int value);
    partial void OnclassidChanged();
    #endregion
		
		public homework_class()
		{
			this._homework = default(EntityRef<homework>);
			this._school_class = default(EntityRef<school_class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_homeworkid", DbType="BigInt NOT NULL")]
		public long homeworkid
		{
			get
			{
				return this._homeworkid;
			}
			set
			{
				if ((this._homeworkid != value))
				{
					if (this._homework.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhomeworkidChanging(value);
					this.SendPropertyChanging();
					this._homeworkid = value;
					this.SendPropertyChanged("homeworkid");
					this.OnhomeworkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classid", DbType="Int NOT NULL")]
		public int classid
		{
			get
			{
				return this._classid;
			}
			set
			{
				if ((this._classid != value))
				{
					if (this._school_class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassidChanging(value);
					this.SendPropertyChanging();
					this._classid = value;
					this.SendPropertyChanged("classid");
					this.OnclassidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_homework_class", Storage="_homework", ThisKey="homeworkid", OtherKey="id", IsForeignKey=true)]
		public homework homework
		{
			get
			{
				return this._homework.Entity;
			}
			set
			{
				homework previousValue = this._homework.Entity;
				if (((previousValue != value) 
							|| (this._homework.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._homework.Entity = null;
						previousValue.homework_classes.Remove(this);
					}
					this._homework.Entity = value;
					if ((value != null))
					{
						value.homework_classes.Add(this);
						this._homeworkid = value.id;
					}
					else
					{
						this._homeworkid = default(long);
					}
					this.SendPropertyChanged("homework");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_homework_class", Storage="_school_class", ThisKey="classid", OtherKey="id", IsForeignKey=true)]
		public school_class school_class
		{
			get
			{
				return this._school_class.Entity;
			}
			set
			{
				school_class previousValue = this._school_class.Entity;
				if (((previousValue != value) 
							|| (this._school_class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_class.Entity = null;
						previousValue.homework_classes.Remove(this);
					}
					this._school_class.Entity = value;
					if ((value != null))
					{
						value.homework_classes.Add(this);
						this._classid = value.id;
					}
					else
					{
						this._classid = default(int);
					}
					this.SendPropertyChanged("school_class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mails")]
	public partial class mail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _toName;
		
		private string _toEmail;
		
		private string _subject;
		
		private string _body;
		
		private string _fromEmail;
		
		private string _fromName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntoNameChanging(string value);
    partial void OntoNameChanged();
    partial void OntoEmailChanging(string value);
    partial void OntoEmailChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnfromEmailChanging(string value);
    partial void OnfromEmailChanged();
    partial void OnfromNameChanging(string value);
    partial void OnfromNameChanged();
    #endregion
		
		public mail()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string toName
		{
			get
			{
				return this._toName;
			}
			set
			{
				if ((this._toName != value))
				{
					this.OntoNameChanging(value);
					this.SendPropertyChanging();
					this._toName = value;
					this.SendPropertyChanged("toName");
					this.OntoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toEmail", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string toEmail
		{
			get
			{
				return this._toEmail;
			}
			set
			{
				if ((this._toEmail != value))
				{
					this.OntoEmailChanging(value);
					this.SendPropertyChanging();
					this._toEmail = value;
					this.SendPropertyChanged("toEmail");
					this.OntoEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_body", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromEmail", DbType="NVarChar(320)")]
		public string fromEmail
		{
			get
			{
				return this._fromEmail;
			}
			set
			{
				if ((this._fromEmail != value))
				{
					this.OnfromEmailChanging(value);
					this.SendPropertyChanging();
					this._fromEmail = value;
					this.SendPropertyChanged("fromEmail");
					this.OnfromEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromName", DbType="NVarChar(200)")]
		public string fromName
		{
			get
			{
				return this._fromName;
			}
			set
			{
				if ((this._fromName != value))
				{
					this.OnfromNameChanging(value);
					this.SendPropertyChanging();
					this._fromName = value;
					this.SendPropertyChanged("fromName");
					this.OnfromNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.siblings")]
	public partial class sibling : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _siblingid;
		
		private long _otherid;
		
		private EntityRef<user> _user;
		
		private EntityRef<user> _user1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnsiblingidChanging(long value);
    partial void OnsiblingidChanged();
    partial void OnotheridChanging(long value);
    partial void OnotheridChanged();
    #endregion
		
		public sibling()
		{
			this._user = default(EntityRef<user>);
			this._user1 = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_siblingid", DbType="BigInt NOT NULL")]
		public long siblingid
		{
			get
			{
				return this._siblingid;
			}
			set
			{
				if ((this._siblingid != value))
				{
					if (this._user1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsiblingidChanging(value);
					this.SendPropertyChanging();
					this._siblingid = value;
					this.SendPropertyChanged("siblingid");
					this.OnsiblingidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_otherid", DbType="BigInt NOT NULL")]
		public long otherid
		{
			get
			{
				return this._otherid;
			}
			set
			{
				if ((this._otherid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnotheridChanging(value);
					this.SendPropertyChanging();
					this._otherid = value;
					this.SendPropertyChanged("otherid");
					this.OnotheridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_sibling", Storage="_user", ThisKey="otherid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.siblings.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.siblings.Add(this);
						this._otherid = value.id;
					}
					else
					{
						this._otherid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_sibling1", Storage="_user1", ThisKey="siblingid", OtherKey="id", IsForeignKey=true)]
		public user user1
		{
			get
			{
				return this._user1.Entity;
			}
			set
			{
				user previousValue = this._user1.Entity;
				if (((previousValue != value) 
							|| (this._user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user1.Entity = null;
						previousValue.siblings1.Remove(this);
					}
					this._user1.Entity = value;
					if ((value != null))
					{
						value.siblings1.Add(this);
						this._siblingid = value.id;
					}
					else
					{
						this._siblingid = default(long);
					}
					this.SendPropertyChanged("user1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_files")]
	public partial class user_file : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _url;
		
		private long _userid;
		
		private string _filename;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnfilenameChanging(string value);
    partial void OnfilenameChanged();
    #endregion
		
		public user_file()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filename", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string filename
		{
			get
			{
				return this._filename;
			}
			set
			{
				if ((this._filename != value))
				{
					this.OnfilenameChanging(value);
					this.SendPropertyChanging();
					this._filename = value;
					this.SendPropertyChanged("filename");
					this.OnfilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_file", Storage="_user", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.user_files.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.user_files.Add(this);
						this._userid = value.id;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.homework_files")]
	public partial class homework_file : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _url;
		
		private System.Nullable<long> _homeworkid;
		
		private string _filename;
		
		private long _size;
		
		private EntityRef<homework> _homework;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnhomeworkidChanging(System.Nullable<long> value);
    partial void OnhomeworkidChanged();
    partial void OnfilenameChanging(string value);
    partial void OnfilenameChanged();
    partial void OnsizeChanging(long value);
    partial void OnsizeChanged();
    #endregion
		
		public homework_file()
		{
			this._homework = default(EntityRef<homework>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_homeworkid", DbType="BigInt")]
		public System.Nullable<long> homeworkid
		{
			get
			{
				return this._homeworkid;
			}
			set
			{
				if ((this._homeworkid != value))
				{
					if (this._homework.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhomeworkidChanging(value);
					this.SendPropertyChanging();
					this._homeworkid = value;
					this.SendPropertyChanged("homeworkid");
					this.OnhomeworkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filename", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string filename
		{
			get
			{
				return this._filename;
			}
			set
			{
				if ((this._filename != value))
				{
					this.OnfilenameChanging(value);
					this.SendPropertyChanging();
					this._filename = value;
					this.SendPropertyChanged("filename");
					this.OnfilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="BigInt NOT NULL")]
		public long size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_homework_file", Storage="_homework", ThisKey="homeworkid", OtherKey="id", IsForeignKey=true)]
		public homework homework
		{
			get
			{
				return this._homework.Entity;
			}
			set
			{
				homework previousValue = this._homework.Entity;
				if (((previousValue != value) 
							|| (this._homework.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._homework.Entity = null;
						previousValue.homework_files.Remove(this);
					}
					this._homework.Entity = value;
					if ((value != null))
					{
						value.homework_files.Add(this);
						this._homeworkid = value.id;
					}
					else
					{
						this._homeworkid = default(Nullable<long>);
					}
					this.SendPropertyChanged("homework");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.feedbacks")]
	public partial class feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _message;
		
		private string _status;
		
		private System.DateTime _created;
		
		private long _creator;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OncreatorChanging(long value);
    partial void OncreatorChanged();
    #endregion
		
		public feedback()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator", DbType="BigInt NOT NULL")]
		public long creator
		{
			get
			{
				return this._creator;
			}
			set
			{
				if ((this._creator != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorChanging(value);
					this.SendPropertyChanging();
					this._creator = value;
					this.SendPropertyChanged("creator");
					this.OncreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_feedback", Storage="_user", ThisKey="creator", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.feedbacks.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.feedbacks.Add(this);
						this._creator = value.id;
					}
					else
					{
						this._creator = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.registration_notifications")]
	public partial class registration_notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private long _userid;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    #endregion
		
		public registration_notification()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_registration_notification", Storage="_user", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.registration_notifications.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.registration_notifications.Add(this);
						this._userid = value.id;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.changelogs")]
	public partial class changelog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private long _userid;
		
		private System.DateTime _created;
		
		private string _changes;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnchangesChanging(string value);
    partial void OnchangesChanged();
    #endregion
		
		public changelog()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_changes", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string changes
		{
			get
			{
				return this._changes;
			}
			set
			{
				if ((this._changes != value))
				{
					this.OnchangesChanging(value);
					this.SendPropertyChanging();
					this._changes = value;
					this.SendPropertyChanged("changes");
					this.OnchangesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_changelog", Storage="_user", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.changelogs.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.changelogs.Add(this);
						this._userid = value.id;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.students_guardians")]
	public partial class students_guardian : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _studentid;
		
		private long _parentid;
		
		private System.Nullable<byte> _type;
		
		private EntityRef<user> _user;
		
		private EntityRef<user> _user1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void OnparentidChanging(long value);
    partial void OnparentidChanged();
    partial void OntypeChanging(System.Nullable<byte> value);
    partial void OntypeChanged();
    #endregion
		
		public students_guardian()
		{
			this._user = default(EntityRef<user>);
			this._user1 = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentid", DbType="BigInt NOT NULL")]
		public long parentid
		{
			get
			{
				return this._parentid;
			}
			set
			{
				if ((this._parentid != value))
				{
					if (this._user1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentidChanging(value);
					this.SendPropertyChanging();
					this._parentid = value;
					this.SendPropertyChanged("parentid");
					this.OnparentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="TinyInt")]
		public System.Nullable<byte> type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_guardian", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.students_guardians.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.students_guardians.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_guardian1", Storage="_user1", ThisKey="parentid", OtherKey="id", IsForeignKey=true)]
		public user user1
		{
			get
			{
				return this._user1.Entity;
			}
			set
			{
				user previousValue = this._user1.Entity;
				if (((previousValue != value) 
							|| (this._user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user1.Entity = null;
						previousValue.students_guardians1.Remove(this);
					}
					this._user1.Entity = value;
					if ((value != null))
					{
						value.students_guardians1.Add(this);
						this._parentid = value.id;
					}
					else
					{
						this._parentid = default(long);
					}
					this.SendPropertyChanged("user1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pages")]
	public partial class page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _content;
		
		private int _type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    #endregion
		
		public page()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.blog_files")]
	public partial class blog_file : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _url;
		
		private System.Nullable<long> _blogid;
		
		private string _name;
		
		private EntityRef<blog> _blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnblogidChanging(System.Nullable<long> value);
    partial void OnblogidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public blog_file()
		{
			this._blog = default(EntityRef<blog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(1000)")]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogid", DbType="BigInt")]
		public System.Nullable<long> blogid
		{
			get
			{
				return this._blogid;
			}
			set
			{
				if ((this._blogid != value))
				{
					if (this._blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnblogidChanging(value);
					this.SendPropertyChanging();
					this._blogid = value;
					this.SendPropertyChanged("blogid");
					this.OnblogidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="blog_blog_file", Storage="_blog", ThisKey="blogid", OtherKey="id", IsForeignKey=true)]
		public blog blog
		{
			get
			{
				return this._blog.Entity;
			}
			set
			{
				blog previousValue = this._blog.Entity;
				if (((previousValue != value) 
							|| (this._blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._blog.Entity = null;
						previousValue.blog_files.Remove(this);
					}
					this._blog.Entity = value;
					if ((value != null))
					{
						value.blog_files.Add(this);
						this._blogid = value.id;
					}
					else
					{
						this._blogid = default(Nullable<long>);
					}
					this.SendPropertyChanged("blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.blog_images")]
	public partial class blog_image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _url;
		
		private System.Nullable<long> _blogid;
		
		private EntityRef<blog> _blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnblogidChanging(System.Nullable<long> value);
    partial void OnblogidChanged();
    #endregion
		
		public blog_image()
		{
			this._blog = default(EntityRef<blog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(1000)")]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogid", DbType="BigInt")]
		public System.Nullable<long> blogid
		{
			get
			{
				return this._blogid;
			}
			set
			{
				if ((this._blogid != value))
				{
					if (this._blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnblogidChanging(value);
					this.SendPropertyChanging();
					this._blogid = value;
					this.SendPropertyChanged("blogid");
					this.OnblogidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="blog_blog_image", Storage="_blog", ThisKey="blogid", OtherKey="id", IsForeignKey=true)]
		public blog blog
		{
			get
			{
				return this._blog.Entity;
			}
			set
			{
				blog previousValue = this._blog.Entity;
				if (((previousValue != value) 
							|| (this._blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._blog.Entity = null;
						previousValue.blog_images.Remove(this);
					}
					this._blog.Entity = value;
					if ((value != null))
					{
						value.blog_images.Add(this);
						this._blogid = value.id;
					}
					else
					{
						this._blogid = default(Nullable<long>);
					}
					this.SendPropertyChanged("blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_parents")]
	public partial class user_parent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _userid;
		
		private string _occupation;
		
		private string _employer;
		
		private string _phone_office;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnoccupationChanging(string value);
    partial void OnoccupationChanged();
    partial void OnemployerChanging(string value);
    partial void OnemployerChanged();
    partial void Onphone_officeChanging(string value);
    partial void Onphone_officeChanged();
    #endregion
		
		public user_parent()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_occupation", DbType="VarChar(100)")]
		public string occupation
		{
			get
			{
				return this._occupation;
			}
			set
			{
				if ((this._occupation != value))
				{
					this.OnoccupationChanging(value);
					this.SendPropertyChanging();
					this._occupation = value;
					this.SendPropertyChanged("occupation");
					this.OnoccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employer", DbType="NVarChar(200)")]
		public string employer
		{
			get
			{
				return this._employer;
			}
			set
			{
				if ((this._employer != value))
				{
					this.OnemployerChanging(value);
					this.SendPropertyChanging();
					this._employer = value;
					this.SendPropertyChanged("employer");
					this.OnemployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_office", DbType="VarChar(50)")]
		public string phone_office
		{
			get
			{
				return this._phone_office;
			}
			set
			{
				if ((this._phone_office != value))
				{
					this.Onphone_officeChanging(value);
					this.SendPropertyChanging();
					this._phone_office = value;
					this.SendPropertyChanged("phone_office");
					this.Onphone_officeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_parent", Storage="_user", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.user_parents = null;
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.user_parents = this;
						this._userid = value.id;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.blogs")]
	public partial class blog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _title;
		
		private long _creator;
		
		private string _body;
		
		private System.DateTime _created;
		
		private bool _ispublic;
		
		private bool _emailed;
		
		private System.Nullable<byte> _layoutMethod;
		
		private EntitySet<blog_file> _blog_files;
		
		private EntitySet<blog_image> _blog_images;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OncreatorChanging(long value);
    partial void OncreatorChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnispublicChanging(bool value);
    partial void OnispublicChanged();
    partial void OnemailedChanging(bool value);
    partial void OnemailedChanged();
    partial void OnlayoutMethodChanging(System.Nullable<byte> value);
    partial void OnlayoutMethodChanged();
    #endregion
		
		public blog()
		{
			this._blog_files = new EntitySet<blog_file>(new Action<blog_file>(this.attach_blog_files), new Action<blog_file>(this.detach_blog_files));
			this._blog_images = new EntitySet<blog_image>(new Action<blog_image>(this.attach_blog_images), new Action<blog_image>(this.detach_blog_images));
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator", DbType="BigInt NOT NULL")]
		public long creator
		{
			get
			{
				return this._creator;
			}
			set
			{
				if ((this._creator != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorChanging(value);
					this.SendPropertyChanging();
					this._creator = value;
					this.SendPropertyChanged("creator");
					this.OncreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_body", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ispublic", DbType="Bit NOT NULL")]
		public bool ispublic
		{
			get
			{
				return this._ispublic;
			}
			set
			{
				if ((this._ispublic != value))
				{
					this.OnispublicChanging(value);
					this.SendPropertyChanging();
					this._ispublic = value;
					this.SendPropertyChanged("ispublic");
					this.OnispublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailed", DbType="Bit NOT NULL")]
		public bool emailed
		{
			get
			{
				return this._emailed;
			}
			set
			{
				if ((this._emailed != value))
				{
					this.OnemailedChanging(value);
					this.SendPropertyChanging();
					this._emailed = value;
					this.SendPropertyChanged("emailed");
					this.OnemailedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_layoutMethod", DbType="TinyInt")]
		public System.Nullable<byte> layoutMethod
		{
			get
			{
				return this._layoutMethod;
			}
			set
			{
				if ((this._layoutMethod != value))
				{
					this.OnlayoutMethodChanging(value);
					this.SendPropertyChanging();
					this._layoutMethod = value;
					this.SendPropertyChanged("layoutMethod");
					this.OnlayoutMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="blog_blog_file", Storage="_blog_files", ThisKey="id", OtherKey="blogid")]
		public EntitySet<blog_file> blog_files
		{
			get
			{
				return this._blog_files;
			}
			set
			{
				this._blog_files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="blog_blog_image", Storage="_blog_images", ThisKey="id", OtherKey="blogid")]
		public EntitySet<blog_image> blog_images
		{
			get
			{
				return this._blog_images;
			}
			set
			{
				this._blog_images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_blog", Storage="_user", ThisKey="creator", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.blogs.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.blogs.Add(this);
						this._creator = value.id;
					}
					else
					{
						this._creator = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_blog_files(blog_file entity)
		{
			this.SendPropertyChanging();
			entity.blog = this;
		}
		
		private void detach_blog_files(blog_file entity)
		{
			this.SendPropertyChanging();
			entity.blog = null;
		}
		
		private void attach_blog_images(blog_image entity)
		{
			this.SendPropertyChanging();
			entity.blog = this;
		}
		
		private void detach_blog_images(blog_image entity)
		{
			this.SendPropertyChanging();
			entity.blog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.registrations")]
	public partial class registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.DateTime _created;
		
		private string _status;
		
		private System.Nullable<long> _applicantid;
		
		private long _studentid;
		
		private System.Nullable<int> _schoolid;
		
		private System.Nullable<int> _schoolyearid;
		
		private System.Nullable<long> _reviewer;
		
		private string _reviewMessage;
		
		private System.Nullable<int> _enrollingYear;
		
		private string _previous_school;
		
		private string _previous_report;
		
		private string _previous_class;
		
		private string _leaving_reason;
		
		private System.Nullable<bool> _isHandicap;
		
		private System.Nullable<bool> _hasLearningProblem;
		
		private string _disability_details;
		
		private System.Nullable<System.DateTime> _admissionDate;
		
		private System.Nullable<System.DateTime> _leftDate;
		
		private string _test_academic;
		
		private string _test_diligence;
		
		private string _test_attendance;
		
		private string _test_responsible;
		
		private string _test_initiative;
		
		private string _test_conduct;
		
		private string _test_honesty;
		
		private string _test_reliance;
		
		private string _test_collaborate;
		
		private string _test_appearance;
		
		private string _test_bm;
		
		private string _test_english;
		
		private string _test_remarks;
		
		private string _cert_reason;
		
		private string _cert_remarks;
		
		private EntityRef<school> _school;
		
		private EntityRef<school_year> _school_year;
		
		private EntityRef<user> _user;
		
		private EntityRef<user> _user1;
		
		private EntityRef<user> _user2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnapplicantidChanging(System.Nullable<long> value);
    partial void OnapplicantidChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void OnschoolidChanging(System.Nullable<int> value);
    partial void OnschoolidChanged();
    partial void OnschoolyearidChanging(System.Nullable<int> value);
    partial void OnschoolyearidChanged();
    partial void OnreviewerChanging(System.Nullable<long> value);
    partial void OnreviewerChanged();
    partial void OnreviewMessageChanging(string value);
    partial void OnreviewMessageChanged();
    partial void OnenrollingYearChanging(System.Nullable<int> value);
    partial void OnenrollingYearChanged();
    partial void Onprevious_schoolChanging(string value);
    partial void Onprevious_schoolChanged();
    partial void Onprevious_reportChanging(string value);
    partial void Onprevious_reportChanged();
    partial void Onprevious_classChanging(string value);
    partial void Onprevious_classChanged();
    partial void Onleaving_reasonChanging(string value);
    partial void Onleaving_reasonChanged();
    partial void OnisHandicapChanging(System.Nullable<bool> value);
    partial void OnisHandicapChanged();
    partial void OnhasLearningProblemChanging(System.Nullable<bool> value);
    partial void OnhasLearningProblemChanged();
    partial void Ondisability_detailsChanging(string value);
    partial void Ondisability_detailsChanged();
    partial void OnadmissionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnadmissionDateChanged();
    partial void OnleftDateChanging(System.Nullable<System.DateTime> value);
    partial void OnleftDateChanged();
    partial void Ontest_academicChanging(string value);
    partial void Ontest_academicChanged();
    partial void Ontest_diligenceChanging(string value);
    partial void Ontest_diligenceChanged();
    partial void Ontest_attendanceChanging(string value);
    partial void Ontest_attendanceChanged();
    partial void Ontest_responsibleChanging(string value);
    partial void Ontest_responsibleChanged();
    partial void Ontest_initiativeChanging(string value);
    partial void Ontest_initiativeChanged();
    partial void Ontest_conductChanging(string value);
    partial void Ontest_conductChanged();
    partial void Ontest_honestyChanging(string value);
    partial void Ontest_honestyChanged();
    partial void Ontest_relianceChanging(string value);
    partial void Ontest_relianceChanged();
    partial void Ontest_collaborateChanging(string value);
    partial void Ontest_collaborateChanged();
    partial void Ontest_appearanceChanging(string value);
    partial void Ontest_appearanceChanged();
    partial void Ontest_bmChanging(string value);
    partial void Ontest_bmChanged();
    partial void Ontest_englishChanging(string value);
    partial void Ontest_englishChanged();
    partial void Ontest_remarksChanging(string value);
    partial void Ontest_remarksChanged();
    partial void Oncert_reasonChanging(string value);
    partial void Oncert_reasonChanged();
    partial void Oncert_remarksChanging(string value);
    partial void Oncert_remarksChanged();
    #endregion
		
		public registration()
		{
			this._school = default(EntityRef<school>);
			this._school_year = default(EntityRef<school_year>);
			this._user = default(EntityRef<user>);
			this._user1 = default(EntityRef<user>);
			this._user2 = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="Date NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(20)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_applicantid", DbType="BigInt")]
		public System.Nullable<long> applicantid
		{
			get
			{
				return this._applicantid;
			}
			set
			{
				if ((this._applicantid != value))
				{
					if (this._user1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnapplicantidChanging(value);
					this.SendPropertyChanging();
					this._applicantid = value;
					this.SendPropertyChanged("applicantid");
					this.OnapplicantidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int")]
		public System.Nullable<int> schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolyearid", DbType="Int")]
		public System.Nullable<int> schoolyearid
		{
			get
			{
				return this._schoolyearid;
			}
			set
			{
				if ((this._schoolyearid != value))
				{
					if (this._school_year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolyearidChanging(value);
					this.SendPropertyChanging();
					this._schoolyearid = value;
					this.SendPropertyChanged("schoolyearid");
					this.OnschoolyearidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reviewer", DbType="BigInt")]
		public System.Nullable<long> reviewer
		{
			get
			{
				return this._reviewer;
			}
			set
			{
				if ((this._reviewer != value))
				{
					if (this._user2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreviewerChanging(value);
					this.SendPropertyChanging();
					this._reviewer = value;
					this.SendPropertyChanged("reviewer");
					this.OnreviewerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reviewMessage", DbType="NVarChar(1000)")]
		public string reviewMessage
		{
			get
			{
				return this._reviewMessage;
			}
			set
			{
				if ((this._reviewMessage != value))
				{
					this.OnreviewMessageChanging(value);
					this.SendPropertyChanging();
					this._reviewMessage = value;
					this.SendPropertyChanged("reviewMessage");
					this.OnreviewMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enrollingYear", DbType="Int")]
		public System.Nullable<int> enrollingYear
		{
			get
			{
				return this._enrollingYear;
			}
			set
			{
				if ((this._enrollingYear != value))
				{
					this.OnenrollingYearChanging(value);
					this.SendPropertyChanging();
					this._enrollingYear = value;
					this.SendPropertyChanged("enrollingYear");
					this.OnenrollingYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_previous_school", DbType="NVarChar(200)")]
		public string previous_school
		{
			get
			{
				return this._previous_school;
			}
			set
			{
				if ((this._previous_school != value))
				{
					this.Onprevious_schoolChanging(value);
					this.SendPropertyChanging();
					this._previous_school = value;
					this.SendPropertyChanged("previous_school");
					this.Onprevious_schoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_previous_report", DbType="VarChar(100)")]
		public string previous_report
		{
			get
			{
				return this._previous_report;
			}
			set
			{
				if ((this._previous_report != value))
				{
					this.Onprevious_reportChanging(value);
					this.SendPropertyChanging();
					this._previous_report = value;
					this.SendPropertyChanged("previous_report");
					this.Onprevious_reportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_previous_class", DbType="VarChar(50)")]
		public string previous_class
		{
			get
			{
				return this._previous_class;
			}
			set
			{
				if ((this._previous_class != value))
				{
					this.Onprevious_classChanging(value);
					this.SendPropertyChanging();
					this._previous_class = value;
					this.SendPropertyChanged("previous_class");
					this.Onprevious_classChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaving_reason", DbType="NVarChar(500)")]
		public string leaving_reason
		{
			get
			{
				return this._leaving_reason;
			}
			set
			{
				if ((this._leaving_reason != value))
				{
					this.Onleaving_reasonChanging(value);
					this.SendPropertyChanging();
					this._leaving_reason = value;
					this.SendPropertyChanged("leaving_reason");
					this.Onleaving_reasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isHandicap", DbType="Bit")]
		public System.Nullable<bool> isHandicap
		{
			get
			{
				return this._isHandicap;
			}
			set
			{
				if ((this._isHandicap != value))
				{
					this.OnisHandicapChanging(value);
					this.SendPropertyChanging();
					this._isHandicap = value;
					this.SendPropertyChanged("isHandicap");
					this.OnisHandicapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasLearningProblem", DbType="Bit")]
		public System.Nullable<bool> hasLearningProblem
		{
			get
			{
				return this._hasLearningProblem;
			}
			set
			{
				if ((this._hasLearningProblem != value))
				{
					this.OnhasLearningProblemChanging(value);
					this.SendPropertyChanging();
					this._hasLearningProblem = value;
					this.SendPropertyChanged("hasLearningProblem");
					this.OnhasLearningProblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disability_details", DbType="NVarChar(500)")]
		public string disability_details
		{
			get
			{
				return this._disability_details;
			}
			set
			{
				if ((this._disability_details != value))
				{
					this.Ondisability_detailsChanging(value);
					this.SendPropertyChanging();
					this._disability_details = value;
					this.SendPropertyChanged("disability_details");
					this.Ondisability_detailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_admissionDate", DbType="Date")]
		public System.Nullable<System.DateTime> admissionDate
		{
			get
			{
				return this._admissionDate;
			}
			set
			{
				if ((this._admissionDate != value))
				{
					this.OnadmissionDateChanging(value);
					this.SendPropertyChanging();
					this._admissionDate = value;
					this.SendPropertyChanged("admissionDate");
					this.OnadmissionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leftDate", DbType="Date")]
		public System.Nullable<System.DateTime> leftDate
		{
			get
			{
				return this._leftDate;
			}
			set
			{
				if ((this._leftDate != value))
				{
					this.OnleftDateChanging(value);
					this.SendPropertyChanging();
					this._leftDate = value;
					this.SendPropertyChanged("leftDate");
					this.OnleftDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_academic", DbType="VarChar(1)")]
		public string test_academic
		{
			get
			{
				return this._test_academic;
			}
			set
			{
				if ((this._test_academic != value))
				{
					this.Ontest_academicChanging(value);
					this.SendPropertyChanging();
					this._test_academic = value;
					this.SendPropertyChanged("test_academic");
					this.Ontest_academicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_diligence", DbType="VarChar(1)")]
		public string test_diligence
		{
			get
			{
				return this._test_diligence;
			}
			set
			{
				if ((this._test_diligence != value))
				{
					this.Ontest_diligenceChanging(value);
					this.SendPropertyChanging();
					this._test_diligence = value;
					this.SendPropertyChanged("test_diligence");
					this.Ontest_diligenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_attendance", DbType="VarChar(1)")]
		public string test_attendance
		{
			get
			{
				return this._test_attendance;
			}
			set
			{
				if ((this._test_attendance != value))
				{
					this.Ontest_attendanceChanging(value);
					this.SendPropertyChanging();
					this._test_attendance = value;
					this.SendPropertyChanged("test_attendance");
					this.Ontest_attendanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_responsible", DbType="VarChar(1)")]
		public string test_responsible
		{
			get
			{
				return this._test_responsible;
			}
			set
			{
				if ((this._test_responsible != value))
				{
					this.Ontest_responsibleChanging(value);
					this.SendPropertyChanging();
					this._test_responsible = value;
					this.SendPropertyChanged("test_responsible");
					this.Ontest_responsibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_initiative", DbType="VarChar(1)")]
		public string test_initiative
		{
			get
			{
				return this._test_initiative;
			}
			set
			{
				if ((this._test_initiative != value))
				{
					this.Ontest_initiativeChanging(value);
					this.SendPropertyChanging();
					this._test_initiative = value;
					this.SendPropertyChanged("test_initiative");
					this.Ontest_initiativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_conduct", DbType="VarChar(1)")]
		public string test_conduct
		{
			get
			{
				return this._test_conduct;
			}
			set
			{
				if ((this._test_conduct != value))
				{
					this.Ontest_conductChanging(value);
					this.SendPropertyChanging();
					this._test_conduct = value;
					this.SendPropertyChanged("test_conduct");
					this.Ontest_conductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_honesty", DbType="VarChar(1)")]
		public string test_honesty
		{
			get
			{
				return this._test_honesty;
			}
			set
			{
				if ((this._test_honesty != value))
				{
					this.Ontest_honestyChanging(value);
					this.SendPropertyChanging();
					this._test_honesty = value;
					this.SendPropertyChanged("test_honesty");
					this.Ontest_honestyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_reliance", DbType="VarChar(1)")]
		public string test_reliance
		{
			get
			{
				return this._test_reliance;
			}
			set
			{
				if ((this._test_reliance != value))
				{
					this.Ontest_relianceChanging(value);
					this.SendPropertyChanging();
					this._test_reliance = value;
					this.SendPropertyChanged("test_reliance");
					this.Ontest_relianceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_collaborate", DbType="VarChar(1)")]
		public string test_collaborate
		{
			get
			{
				return this._test_collaborate;
			}
			set
			{
				if ((this._test_collaborate != value))
				{
					this.Ontest_collaborateChanging(value);
					this.SendPropertyChanging();
					this._test_collaborate = value;
					this.SendPropertyChanged("test_collaborate");
					this.Ontest_collaborateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_appearance", DbType="VarChar(1)")]
		public string test_appearance
		{
			get
			{
				return this._test_appearance;
			}
			set
			{
				if ((this._test_appearance != value))
				{
					this.Ontest_appearanceChanging(value);
					this.SendPropertyChanging();
					this._test_appearance = value;
					this.SendPropertyChanged("test_appearance");
					this.Ontest_appearanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_bm", DbType="VarChar(1)")]
		public string test_bm
		{
			get
			{
				return this._test_bm;
			}
			set
			{
				if ((this._test_bm != value))
				{
					this.Ontest_bmChanging(value);
					this.SendPropertyChanging();
					this._test_bm = value;
					this.SendPropertyChanged("test_bm");
					this.Ontest_bmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_english", DbType="VarChar(1)")]
		public string test_english
		{
			get
			{
				return this._test_english;
			}
			set
			{
				if ((this._test_english != value))
				{
					this.Ontest_englishChanging(value);
					this.SendPropertyChanging();
					this._test_english = value;
					this.SendPropertyChanged("test_english");
					this.Ontest_englishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_remarks", DbType="NVarChar(1000)")]
		public string test_remarks
		{
			get
			{
				return this._test_remarks;
			}
			set
			{
				if ((this._test_remarks != value))
				{
					this.Ontest_remarksChanging(value);
					this.SendPropertyChanging();
					this._test_remarks = value;
					this.SendPropertyChanged("test_remarks");
					this.Ontest_remarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_reason", DbType="NVarChar(200)")]
		public string cert_reason
		{
			get
			{
				return this._cert_reason;
			}
			set
			{
				if ((this._cert_reason != value))
				{
					this.Oncert_reasonChanging(value);
					this.SendPropertyChanging();
					this._cert_reason = value;
					this.SendPropertyChanged("cert_reason");
					this.Oncert_reasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_remarks", DbType="NVarChar(100)")]
		public string cert_remarks
		{
			get
			{
				return this._cert_remarks;
			}
			set
			{
				if ((this._cert_remarks != value))
				{
					this.Oncert_remarksChanging(value);
					this.SendPropertyChanging();
					this._cert_remarks = value;
					this.SendPropertyChanged("cert_remarks");
					this.Oncert_remarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_registration", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.registrations.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.registrations.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(Nullable<int>);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_year_registration", Storage="_school_year", ThisKey="schoolyearid", OtherKey="id", IsForeignKey=true)]
		public school_year school_year
		{
			get
			{
				return this._school_year.Entity;
			}
			set
			{
				school_year previousValue = this._school_year.Entity;
				if (((previousValue != value) 
							|| (this._school_year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_year.Entity = null;
						previousValue.registrations.Remove(this);
					}
					this._school_year.Entity = value;
					if ((value != null))
					{
						value.registrations.Add(this);
						this._schoolyearid = value.id;
					}
					else
					{
						this._schoolyearid = default(Nullable<int>);
					}
					this.SendPropertyChanged("school_year");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_registration", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.registrations.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.registrations.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_registration1", Storage="_user1", ThisKey="applicantid", OtherKey="id", IsForeignKey=true)]
		public user user1
		{
			get
			{
				return this._user1.Entity;
			}
			set
			{
				user previousValue = this._user1.Entity;
				if (((previousValue != value) 
							|| (this._user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user1.Entity = null;
						previousValue.registrations1.Remove(this);
					}
					this._user1.Entity = value;
					if ((value != null))
					{
						value.registrations1.Add(this);
						this._applicantid = value.id;
					}
					else
					{
						this._applicantid = default(Nullable<long>);
					}
					this.SendPropertyChanged("user1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_registration2", Storage="_user2", ThisKey="reviewer", OtherKey="id", IsForeignKey=true)]
		public user user2
		{
			get
			{
				return this._user2.Entity;
			}
			set
			{
				user previousValue = this._user2.Entity;
				if (((previousValue != value) 
							|| (this._user2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user2.Entity = null;
						previousValue.registrations2.Remove(this);
					}
					this._user2.Entity = value;
					if ((value != null))
					{
						value.registrations2.Add(this);
						this._reviewer = value.id;
					}
					else
					{
						this._reviewer = default(Nullable<long>);
					}
					this.SendPropertyChanged("user2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.classes_teachers_allocated")]
	public partial class classes_teachers_allocated : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _schoolid;
		
		private long _teacherid;
		
		private System.Nullable<long> _subjectid;
		
		private int _classid;
		
		private int _day;
		
		private int _year;
		
		private System.TimeSpan _time_start;
		
		private System.TimeSpan _time_end;
		
		private EntityRef<subject> _subject;
		
		private EntityRef<school> _school;
		
		private EntityRef<school_class> _school_class;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    partial void OnteacheridChanging(long value);
    partial void OnteacheridChanged();
    partial void OnsubjectidChanging(System.Nullable<long> value);
    partial void OnsubjectidChanged();
    partial void OnclassidChanging(int value);
    partial void OnclassidChanged();
    partial void OndayChanging(int value);
    partial void OndayChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void Ontime_startChanging(System.TimeSpan value);
    partial void Ontime_startChanged();
    partial void Ontime_endChanging(System.TimeSpan value);
    partial void Ontime_endChanged();
    #endregion
		
		public classes_teachers_allocated()
		{
			this._subject = default(EntityRef<subject>);
			this._school = default(EntityRef<school>);
			this._school_class = default(EntityRef<school_class>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherid", DbType="BigInt NOT NULL")]
		public long teacherid
		{
			get
			{
				return this._teacherid;
			}
			set
			{
				if ((this._teacherid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacheridChanging(value);
					this.SendPropertyChanging();
					this._teacherid = value;
					this.SendPropertyChanged("teacherid");
					this.OnteacheridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectid", DbType="BigInt")]
		public System.Nullable<long> subjectid
		{
			get
			{
				return this._subjectid;
			}
			set
			{
				if ((this._subjectid != value))
				{
					if (this._subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectidChanging(value);
					this.SendPropertyChanging();
					this._subjectid = value;
					this.SendPropertyChanged("subjectid");
					this.OnsubjectidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classid", DbType="Int NOT NULL")]
		public int classid
		{
			get
			{
				return this._classid;
			}
			set
			{
				if ((this._classid != value))
				{
					if (this._school_class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassidChanging(value);
					this.SendPropertyChanging();
					this._classid = value;
					this.SendPropertyChanged("classid");
					this.OnclassidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day", DbType="Int NOT NULL")]
		public int day
		{
			get
			{
				return this._day;
			}
			set
			{
				if ((this._day != value))
				{
					this.OndayChanging(value);
					this.SendPropertyChanging();
					this._day = value;
					this.SendPropertyChanged("day");
					this.OndayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_start", DbType="Time NOT NULL")]
		public System.TimeSpan time_start
		{
			get
			{
				return this._time_start;
			}
			set
			{
				if ((this._time_start != value))
				{
					this.Ontime_startChanging(value);
					this.SendPropertyChanging();
					this._time_start = value;
					this.SendPropertyChanged("time_start");
					this.Ontime_startChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_end", DbType="Time NOT NULL")]
		public System.TimeSpan time_end
		{
			get
			{
				return this._time_end;
			}
			set
			{
				if ((this._time_end != value))
				{
					this.Ontime_endChanging(value);
					this.SendPropertyChanging();
					this._time_end = value;
					this.SendPropertyChanged("time_end");
					this.Ontime_endChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_classes_teachers_allocated", Storage="_subject", ThisKey="subjectid", OtherKey="id", IsForeignKey=true)]
		public subject subject
		{
			get
			{
				return this._subject.Entity;
			}
			set
			{
				subject previousValue = this._subject.Entity;
				if (((previousValue != value) 
							|| (this._subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._subject.Entity = null;
						previousValue.classes_teachers_allocateds.Remove(this);
					}
					this._subject.Entity = value;
					if ((value != null))
					{
						value.classes_teachers_allocateds.Add(this);
						this._subjectid = value.id;
					}
					else
					{
						this._subjectid = default(Nullable<long>);
					}
					this.SendPropertyChanged("subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_classes_teachers_allocated", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.classes_teachers_allocateds.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.classes_teachers_allocateds.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_classes_teachers_allocated", Storage="_school_class", ThisKey="classid", OtherKey="id", IsForeignKey=true)]
		public school_class school_class
		{
			get
			{
				return this._school_class.Entity;
			}
			set
			{
				school_class previousValue = this._school_class.Entity;
				if (((previousValue != value) 
							|| (this._school_class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_class.Entity = null;
						previousValue.classes_teachers_allocateds.Remove(this);
					}
					this._school_class.Entity = value;
					if ((value != null))
					{
						value.classes_teachers_allocateds.Add(this);
						this._classid = value.id;
					}
					else
					{
						this._classid = default(int);
					}
					this.SendPropertyChanged("school_class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_classes_teachers_allocated", Storage="_user", ThisKey="teacherid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.classes_teachers_allocateds.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.classes_teachers_allocateds.Add(this);
						this._teacherid = value.id;
					}
					else
					{
						this._teacherid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.classes_students_allocated")]
	public partial class classes_students_allocated : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _year;
		
		private long _studentid;
		
		private int _classid;
		
		private EntityRef<school_class> _school_class;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void OnclassidChanging(int value);
    partial void OnclassidChanged();
    #endregion
		
		public classes_students_allocated()
		{
			this._school_class = default(EntityRef<school_class>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classid", DbType="Int NOT NULL")]
		public int classid
		{
			get
			{
				return this._classid;
			}
			set
			{
				if ((this._classid != value))
				{
					if (this._school_class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassidChanging(value);
					this.SendPropertyChanging();
					this._classid = value;
					this.SendPropertyChanged("classid");
					this.OnclassidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_classes_students_allocated", Storage="_school_class", ThisKey="classid", OtherKey="id", IsForeignKey=true)]
		public school_class school_class
		{
			get
			{
				return this._school_class.Entity;
			}
			set
			{
				school_class previousValue = this._school_class.Entity;
				if (((previousValue != value) 
							|| (this._school_class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_class.Entity = null;
						previousValue.classes_students_allocateds.Remove(this);
					}
					this._school_class.Entity = value;
					if ((value != null))
					{
						value.classes_students_allocateds.Add(this);
						this._classid = value.id;
					}
					else
					{
						this._classid = default(int);
					}
					this.SendPropertyChanged("school_class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_classes_students_allocated", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.classes_students_allocateds.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.classes_students_allocateds.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_images")]
	public partial class user_image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _url;
		
		private EntitySet<user> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    #endregion
		
		public user_image()
		{
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_image_user", Storage="_users", ThisKey="id", OtherKey="photo")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.user_image = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.user_image = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eca_students")]
	public partial class eca_student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _studentid;
		
		private string _post;
		
		private int _ecaid;
		
		private int _year;
		
		private string _achievement;
		
		private string _type;
		
		private string _remarks;
		
		private EntityRef<eca> _eca;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void OnpostChanging(string value);
    partial void OnpostChanged();
    partial void OnecaidChanging(int value);
    partial void OnecaidChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OnachievementChanging(string value);
    partial void OnachievementChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnremarksChanging(string value);
    partial void OnremarksChanged();
    #endregion
		
		public eca_student()
		{
			this._eca = default(EntityRef<eca>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_post", DbType="NVarChar(100)")]
		public string post
		{
			get
			{
				return this._post;
			}
			set
			{
				if ((this._post != value))
				{
					this.OnpostChanging(value);
					this.SendPropertyChanging();
					this._post = value;
					this.SendPropertyChanged("post");
					this.OnpostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ecaid", DbType="Int NOT NULL")]
		public int ecaid
		{
			get
			{
				return this._ecaid;
			}
			set
			{
				if ((this._ecaid != value))
				{
					if (this._eca.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnecaidChanging(value);
					this.SendPropertyChanging();
					this._ecaid = value;
					this.SendPropertyChanged("ecaid");
					this.OnecaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_achievement", DbType="NVarChar(1000)")]
		public string achievement
		{
			get
			{
				return this._achievement;
			}
			set
			{
				if ((this._achievement != value))
				{
					this.OnachievementChanging(value);
					this.SendPropertyChanging();
					this._achievement = value;
					this.SendPropertyChanged("achievement");
					this.OnachievementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(10)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remarks", DbType="NVarChar(500)")]
		public string remarks
		{
			get
			{
				return this._remarks;
			}
			set
			{
				if ((this._remarks != value))
				{
					this.OnremarksChanging(value);
					this.SendPropertyChanging();
					this._remarks = value;
					this.SendPropertyChanged("remarks");
					this.OnremarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eca_eca_student", Storage="_eca", ThisKey="ecaid", OtherKey="id", IsForeignKey=true)]
		public eca eca
		{
			get
			{
				return this._eca.Entity;
			}
			set
			{
				eca previousValue = this._eca.Entity;
				if (((previousValue != value) 
							|| (this._eca.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._eca.Entity = null;
						previousValue.eca_students.Remove(this);
					}
					this._eca.Entity = value;
					if ((value != null))
					{
						value.eca_students.Add(this);
						this._ecaid = value.id;
					}
					else
					{
						this._ecaid = default(int);
					}
					this.SendPropertyChanged("eca");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_eca_student", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.eca_students.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.eca_students.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.school_terms")]
	public partial class school_term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private int _schoolid;
		
		private EntitySet<attendance_term> _attendance_terms;
		
		private EntitySet<students_remark> _students_remarks;
		
		private EntityRef<school> _school;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    #endregion
		
		public school_term()
		{
			this._attendance_terms = new EntitySet<attendance_term>(new Action<attendance_term>(this.attach_attendance_terms), new Action<attendance_term>(this.detach_attendance_terms));
			this._students_remarks = new EntitySet<students_remark>(new Action<students_remark>(this.attach_students_remarks), new Action<students_remark>(this.detach_students_remarks));
			this._school = default(EntityRef<school>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_term_attendance_term", Storage="_attendance_terms", ThisKey="id", OtherKey="termid")]
		public EntitySet<attendance_term> attendance_terms
		{
			get
			{
				return this._attendance_terms;
			}
			set
			{
				this._attendance_terms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_term_students_remark", Storage="_students_remarks", ThisKey="id", OtherKey="term")]
		public EntitySet<students_remark> students_remarks
		{
			get
			{
				return this._students_remarks;
			}
			set
			{
				this._students_remarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_school_term", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.school_terms.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.school_terms.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_attendance_terms(attendance_term entity)
		{
			this.SendPropertyChanging();
			entity.school_term = this;
		}
		
		private void detach_attendance_terms(attendance_term entity)
		{
			this.SendPropertyChanging();
			entity.school_term = null;
		}
		
		private void attach_students_remarks(students_remark entity)
		{
			this.SendPropertyChanging();
			entity.school_term = this;
		}
		
		private void detach_students_remarks(students_remark entity)
		{
			this.SendPropertyChanging();
			entity.school_term = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.attendance_terms")]
	public partial class attendance_term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _schoolid;
		
		private short _termid;
		
		private int _year;
		
		private System.DateTime _startdate;
		
		private System.DateTime _enddate;
		
		private int _days;
		
		private EntityRef<school_term> _school_term;
		
		private EntityRef<school> _school;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    partial void OntermidChanging(short value);
    partial void OntermidChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OnstartdateChanging(System.DateTime value);
    partial void OnstartdateChanged();
    partial void OnenddateChanging(System.DateTime value);
    partial void OnenddateChanged();
    partial void OndaysChanging(int value);
    partial void OndaysChanged();
    #endregion
		
		public attendance_term()
		{
			this._school_term = default(EntityRef<school_term>);
			this._school = default(EntityRef<school>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_termid", DbType="SmallInt NOT NULL")]
		public short termid
		{
			get
			{
				return this._termid;
			}
			set
			{
				if ((this._termid != value))
				{
					if (this._school_term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntermidChanging(value);
					this.SendPropertyChanging();
					this._termid = value;
					this.SendPropertyChanged("termid");
					this.OntermidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startdate", DbType="Date NOT NULL")]
		public System.DateTime startdate
		{
			get
			{
				return this._startdate;
			}
			set
			{
				if ((this._startdate != value))
				{
					this.OnstartdateChanging(value);
					this.SendPropertyChanging();
					this._startdate = value;
					this.SendPropertyChanged("startdate");
					this.OnstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enddate", DbType="Date NOT NULL")]
		public System.DateTime enddate
		{
			get
			{
				return this._enddate;
			}
			set
			{
				if ((this._enddate != value))
				{
					this.OnenddateChanging(value);
					this.SendPropertyChanging();
					this._enddate = value;
					this.SendPropertyChanged("enddate");
					this.OnenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_days", DbType="Int NOT NULL")]
		public int days
		{
			get
			{
				return this._days;
			}
			set
			{
				if ((this._days != value))
				{
					this.OndaysChanging(value);
					this.SendPropertyChanging();
					this._days = value;
					this.SendPropertyChanged("days");
					this.OndaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_term_attendance_term", Storage="_school_term", ThisKey="termid", OtherKey="id", IsForeignKey=true)]
		public school_term school_term
		{
			get
			{
				return this._school_term.Entity;
			}
			set
			{
				school_term previousValue = this._school_term.Entity;
				if (((previousValue != value) 
							|| (this._school_term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_term.Entity = null;
						previousValue.attendance_terms.Remove(this);
					}
					this._school_term.Entity = value;
					if ((value != null))
					{
						value.attendance_terms.Add(this);
						this._termid = value.id;
					}
					else
					{
						this._termid = default(short);
					}
					this.SendPropertyChanged("school_term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_attendance_term", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.attendance_terms.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.attendance_terms.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.students_remarks")]
	public partial class students_remark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _studentid;
		
		private int _year;
		
		private short _term;
		
		private string _remarks;
		
		private string _conduct;
		
		private EntityRef<school_term> _school_term;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OntermChanging(short value);
    partial void OntermChanged();
    partial void OnremarksChanging(string value);
    partial void OnremarksChanged();
    partial void OnconductChanging(string value);
    partial void OnconductChanged();
    #endregion
		
		public students_remark()
		{
			this._school_term = default(EntityRef<school_term>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_term", DbType="SmallInt NOT NULL")]
		public short term
		{
			get
			{
				return this._term;
			}
			set
			{
				if ((this._term != value))
				{
					if (this._school_term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntermChanging(value);
					this.SendPropertyChanging();
					this._term = value;
					this.SendPropertyChanged("term");
					this.OntermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remarks", DbType="NVarChar(1000)")]
		public string remarks
		{
			get
			{
				return this._remarks;
			}
			set
			{
				if ((this._remarks != value))
				{
					this.OnremarksChanging(value);
					this.SendPropertyChanging();
					this._remarks = value;
					this.SendPropertyChanged("remarks");
					this.OnremarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_conduct", DbType="NVarChar(1)")]
		public string conduct
		{
			get
			{
				return this._conduct;
			}
			set
			{
				if ((this._conduct != value))
				{
					this.OnconductChanging(value);
					this.SendPropertyChanging();
					this._conduct = value;
					this.SendPropertyChanged("conduct");
					this.OnconductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_term_students_remark", Storage="_school_term", ThisKey="term", OtherKey="id", IsForeignKey=true)]
		public school_term school_term
		{
			get
			{
				return this._school_term.Entity;
			}
			set
			{
				school_term previousValue = this._school_term.Entity;
				if (((previousValue != value) 
							|| (this._school_term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_term.Entity = null;
						previousValue.students_remarks.Remove(this);
					}
					this._school_term.Entity = value;
					if ((value != null))
					{
						value.students_remarks.Add(this);
						this._term = value.id;
					}
					else
					{
						this._term = default(short);
					}
					this.SendPropertyChanged("school_term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_remark", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.students_remarks.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.students_remarks.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.exam_marks")]
	public partial class exam_mark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _studentid;
		
		private long _exam_subjectid;
		
		private string _mark;
		
		private long _examid;
		
		private bool _absent;
		
		private EntityRef<exam_subject> _exam_subject;
		
		private EntityRef<exam> _exam;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void Onexam_subjectidChanging(long value);
    partial void Onexam_subjectidChanged();
    partial void OnmarkChanging(string value);
    partial void OnmarkChanged();
    partial void OnexamidChanging(long value);
    partial void OnexamidChanged();
    partial void OnabsentChanging(bool value);
    partial void OnabsentChanged();
    #endregion
		
		public exam_mark()
		{
			this._exam_subject = default(EntityRef<exam_subject>);
			this._exam = default(EntityRef<exam>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_subjectid", DbType="BigInt NOT NULL")]
		public long exam_subjectid
		{
			get
			{
				return this._exam_subjectid;
			}
			set
			{
				if ((this._exam_subjectid != value))
				{
					if (this._exam_subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onexam_subjectidChanging(value);
					this.SendPropertyChanging();
					this._exam_subjectid = value;
					this.SendPropertyChanged("exam_subjectid");
					this.Onexam_subjectidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mark", DbType="VarChar(3)")]
		public string mark
		{
			get
			{
				return this._mark;
			}
			set
			{
				if ((this._mark != value))
				{
					this.OnmarkChanging(value);
					this.SendPropertyChanging();
					this._mark = value;
					this.SendPropertyChanged("mark");
					this.OnmarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_examid", DbType="BigInt NOT NULL")]
		public long examid
		{
			get
			{
				return this._examid;
			}
			set
			{
				if ((this._examid != value))
				{
					if (this._exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnexamidChanging(value);
					this.SendPropertyChanging();
					this._examid = value;
					this.SendPropertyChanged("examid");
					this.OnexamidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_absent", DbType="Bit NOT NULL")]
		public bool absent
		{
			get
			{
				return this._absent;
			}
			set
			{
				if ((this._absent != value))
				{
					this.OnabsentChanging(value);
					this.SendPropertyChanging();
					this._absent = value;
					this.SendPropertyChanged("absent");
					this.OnabsentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_subject_exam_mark", Storage="_exam_subject", ThisKey="exam_subjectid", OtherKey="id", IsForeignKey=true)]
		public exam_subject exam_subject
		{
			get
			{
				return this._exam_subject.Entity;
			}
			set
			{
				exam_subject previousValue = this._exam_subject.Entity;
				if (((previousValue != value) 
							|| (this._exam_subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._exam_subject.Entity = null;
						previousValue.exam_marks.Remove(this);
					}
					this._exam_subject.Entity = value;
					if ((value != null))
					{
						value.exam_marks.Add(this);
						this._exam_subjectid = value.id;
					}
					else
					{
						this._exam_subjectid = default(long);
					}
					this.SendPropertyChanged("exam_subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_exam_mark", Storage="_exam", ThisKey="examid", OtherKey="id", IsForeignKey=true)]
		public exam exam
		{
			get
			{
				return this._exam.Entity;
			}
			set
			{
				exam previousValue = this._exam.Entity;
				if (((previousValue != value) 
							|| (this._exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._exam.Entity = null;
						previousValue.exam_marks.Remove(this);
					}
					this._exam.Entity = value;
					if ((value != null))
					{
						value.exam_marks.Add(this);
						this._examid = value.id;
					}
					else
					{
						this._examid = default(long);
					}
					this.SendPropertyChanged("exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_exam_mark", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.exam_marks.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.exam_marks.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_staff")]
	public partial class user_staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _userid;
		
		private string _salary_grade;
		
		private string _income_tax;
		
		private string _epf;
		
		private string _socso;
		
		private string _spouse_name;
		
		private string _spouse_employer;
		
		private string _spouse_employer_address;
		
		private string _spouse_phone_cell;
		
		private string _spouse_phone_work;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void Onsalary_gradeChanging(string value);
    partial void Onsalary_gradeChanged();
    partial void Onincome_taxChanging(string value);
    partial void Onincome_taxChanged();
    partial void OnepfChanging(string value);
    partial void OnepfChanged();
    partial void OnsocsoChanging(string value);
    partial void OnsocsoChanged();
    partial void Onspouse_nameChanging(string value);
    partial void Onspouse_nameChanged();
    partial void Onspouse_employerChanging(string value);
    partial void Onspouse_employerChanged();
    partial void Onspouse_employer_addressChanging(string value);
    partial void Onspouse_employer_addressChanged();
    partial void Onspouse_phone_cellChanging(string value);
    partial void Onspouse_phone_cellChanged();
    partial void Onspouse_phone_workChanging(string value);
    partial void Onspouse_phone_workChanged();
    #endregion
		
		public user_staff()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary_grade", DbType="VarChar(10)")]
		public string salary_grade
		{
			get
			{
				return this._salary_grade;
			}
			set
			{
				if ((this._salary_grade != value))
				{
					this.Onsalary_gradeChanging(value);
					this.SendPropertyChanging();
					this._salary_grade = value;
					this.SendPropertyChanged("salary_grade");
					this.Onsalary_gradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_income_tax", DbType="VarChar(20)")]
		public string income_tax
		{
			get
			{
				return this._income_tax;
			}
			set
			{
				if ((this._income_tax != value))
				{
					this.Onincome_taxChanging(value);
					this.SendPropertyChanging();
					this._income_tax = value;
					this.SendPropertyChanged("income_tax");
					this.Onincome_taxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_epf", DbType="VarChar(20)")]
		public string epf
		{
			get
			{
				return this._epf;
			}
			set
			{
				if ((this._epf != value))
				{
					this.OnepfChanging(value);
					this.SendPropertyChanging();
					this._epf = value;
					this.SendPropertyChanged("epf");
					this.OnepfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_socso", DbType="VarChar(20)")]
		public string socso
		{
			get
			{
				return this._socso;
			}
			set
			{
				if ((this._socso != value))
				{
					this.OnsocsoChanging(value);
					this.SendPropertyChanging();
					this._socso = value;
					this.SendPropertyChanged("socso");
					this.OnsocsoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spouse_name", DbType="NVarChar(100)")]
		public string spouse_name
		{
			get
			{
				return this._spouse_name;
			}
			set
			{
				if ((this._spouse_name != value))
				{
					this.Onspouse_nameChanging(value);
					this.SendPropertyChanging();
					this._spouse_name = value;
					this.SendPropertyChanged("spouse_name");
					this.Onspouse_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spouse_employer", DbType="NVarChar(200)")]
		public string spouse_employer
		{
			get
			{
				return this._spouse_employer;
			}
			set
			{
				if ((this._spouse_employer != value))
				{
					this.Onspouse_employerChanging(value);
					this.SendPropertyChanging();
					this._spouse_employer = value;
					this.SendPropertyChanged("spouse_employer");
					this.Onspouse_employerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spouse_employer_address", DbType="NVarChar(200)")]
		public string spouse_employer_address
		{
			get
			{
				return this._spouse_employer_address;
			}
			set
			{
				if ((this._spouse_employer_address != value))
				{
					this.Onspouse_employer_addressChanging(value);
					this.SendPropertyChanging();
					this._spouse_employer_address = value;
					this.SendPropertyChanged("spouse_employer_address");
					this.Onspouse_employer_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spouse_phone_cell", DbType="VarChar(50)")]
		public string spouse_phone_cell
		{
			get
			{
				return this._spouse_phone_cell;
			}
			set
			{
				if ((this._spouse_phone_cell != value))
				{
					this.Onspouse_phone_cellChanging(value);
					this.SendPropertyChanging();
					this._spouse_phone_cell = value;
					this.SendPropertyChanged("spouse_phone_cell");
					this.Onspouse_phone_cellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spouse_phone_work", DbType="VarChar(50)")]
		public string spouse_phone_work
		{
			get
			{
				return this._spouse_phone_work;
			}
			set
			{
				if ((this._spouse_phone_work != value))
				{
					this.Onspouse_phone_workChanging(value);
					this.SendPropertyChanging();
					this._spouse_phone_work = value;
					this.SendPropertyChanged("spouse_phone_work");
					this.Onspouse_phone_workChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_staff", Storage="_user", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.user_staffs = null;
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.user_staffs = this;
						this._userid = value.id;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.subjects")]
	public partial class subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private int _schoolid;
		
		private EntitySet<classes_teachers_allocated> _classes_teachers_allocateds;
		
		private EntitySet<subject_teacher> _subject_teachers;
		
		private EntitySet<exam_template_subject> _exam_template_subjects;
		
		private EntitySet<homework> _homeworks;
		
		private EntityRef<school> _school;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    #endregion
		
		public subject()
		{
			this._classes_teachers_allocateds = new EntitySet<classes_teachers_allocated>(new Action<classes_teachers_allocated>(this.attach_classes_teachers_allocateds), new Action<classes_teachers_allocated>(this.detach_classes_teachers_allocateds));
			this._subject_teachers = new EntitySet<subject_teacher>(new Action<subject_teacher>(this.attach_subject_teachers), new Action<subject_teacher>(this.detach_subject_teachers));
			this._exam_template_subjects = new EntitySet<exam_template_subject>(new Action<exam_template_subject>(this.attach_exam_template_subjects), new Action<exam_template_subject>(this.detach_exam_template_subjects));
			this._homeworks = new EntitySet<homework>(new Action<homework>(this.attach_homeworks), new Action<homework>(this.detach_homeworks));
			this._school = default(EntityRef<school>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_classes_teachers_allocated", Storage="_classes_teachers_allocateds", ThisKey="id", OtherKey="subjectid")]
		public EntitySet<classes_teachers_allocated> classes_teachers_allocateds
		{
			get
			{
				return this._classes_teachers_allocateds;
			}
			set
			{
				this._classes_teachers_allocateds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_subject_teacher", Storage="_subject_teachers", ThisKey="id", OtherKey="subjectid")]
		public EntitySet<subject_teacher> subject_teachers
		{
			get
			{
				return this._subject_teachers;
			}
			set
			{
				this._subject_teachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_exam_template_subject", Storage="_exam_template_subjects", ThisKey="id", OtherKey="subjectid")]
		public EntitySet<exam_template_subject> exam_template_subjects
		{
			get
			{
				return this._exam_template_subjects;
			}
			set
			{
				this._exam_template_subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_homework", Storage="_homeworks", ThisKey="id", OtherKey="subjectid")]
		public EntitySet<homework> homeworks
		{
			get
			{
				return this._homeworks;
			}
			set
			{
				this._homeworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_subject", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.subjects.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.subjects.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_classes_teachers_allocateds(classes_teachers_allocated entity)
		{
			this.SendPropertyChanging();
			entity.subject = this;
		}
		
		private void detach_classes_teachers_allocateds(classes_teachers_allocated entity)
		{
			this.SendPropertyChanging();
			entity.subject = null;
		}
		
		private void attach_subject_teachers(subject_teacher entity)
		{
			this.SendPropertyChanging();
			entity.subject = this;
		}
		
		private void detach_subject_teachers(subject_teacher entity)
		{
			this.SendPropertyChanging();
			entity.subject = null;
		}
		
		private void attach_exam_template_subjects(exam_template_subject entity)
		{
			this.SendPropertyChanging();
			entity.subject = this;
		}
		
		private void detach_exam_template_subjects(exam_template_subject entity)
		{
			this.SendPropertyChanging();
			entity.subject = null;
		}
		
		private void attach_homeworks(homework entity)
		{
			this.SendPropertyChanging();
			entity.subject = this;
		}
		
		private void detach_homeworks(homework entity)
		{
			this.SendPropertyChanging();
			entity.subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.subject_teachers")]
	public partial class subject_teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _teacherid;
		
		private long _subjectid;
		
		private int _classid;
		
		private int _year;
		
		private EntityRef<subject> _subject;
		
		private EntityRef<school_class> _school_class;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnteacheridChanging(long value);
    partial void OnteacheridChanged();
    partial void OnsubjectidChanging(long value);
    partial void OnsubjectidChanged();
    partial void OnclassidChanging(int value);
    partial void OnclassidChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    #endregion
		
		public subject_teacher()
		{
			this._subject = default(EntityRef<subject>);
			this._school_class = default(EntityRef<school_class>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherid", DbType="BigInt NOT NULL")]
		public long teacherid
		{
			get
			{
				return this._teacherid;
			}
			set
			{
				if ((this._teacherid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacheridChanging(value);
					this.SendPropertyChanging();
					this._teacherid = value;
					this.SendPropertyChanged("teacherid");
					this.OnteacheridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectid", DbType="BigInt NOT NULL")]
		public long subjectid
		{
			get
			{
				return this._subjectid;
			}
			set
			{
				if ((this._subjectid != value))
				{
					if (this._subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectidChanging(value);
					this.SendPropertyChanging();
					this._subjectid = value;
					this.SendPropertyChanged("subjectid");
					this.OnsubjectidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classid", DbType="Int NOT NULL")]
		public int classid
		{
			get
			{
				return this._classid;
			}
			set
			{
				if ((this._classid != value))
				{
					if (this._school_class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassidChanging(value);
					this.SendPropertyChanging();
					this._classid = value;
					this.SendPropertyChanged("classid");
					this.OnclassidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_subject_teacher", Storage="_subject", ThisKey="subjectid", OtherKey="id", IsForeignKey=true)]
		public subject subject
		{
			get
			{
				return this._subject.Entity;
			}
			set
			{
				subject previousValue = this._subject.Entity;
				if (((previousValue != value) 
							|| (this._subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._subject.Entity = null;
						previousValue.subject_teachers.Remove(this);
					}
					this._subject.Entity = value;
					if ((value != null))
					{
						value.subject_teachers.Add(this);
						this._subjectid = value.id;
					}
					else
					{
						this._subjectid = default(long);
					}
					this.SendPropertyChanged("subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_subject_teacher", Storage="_school_class", ThisKey="classid", OtherKey="id", IsForeignKey=true)]
		public school_class school_class
		{
			get
			{
				return this._school_class.Entity;
			}
			set
			{
				school_class previousValue = this._school_class.Entity;
				if (((previousValue != value) 
							|| (this._school_class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_class.Entity = null;
						previousValue.subject_teachers.Remove(this);
					}
					this._school_class.Entity = value;
					if ((value != null))
					{
						value.subject_teachers.Add(this);
						this._classid = value.id;
					}
					else
					{
						this._classid = default(int);
					}
					this.SendPropertyChanged("school_class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_subject_teacher", Storage="_user", ThisKey="teacherid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.subject_teachers.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.subject_teachers.Add(this);
						this._teacherid = value.id;
					}
					else
					{
						this._teacherid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.exam_template_subjects")]
	public partial class exam_template_subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _code;
		
		private int _templateid;
		
		private System.Nullable<byte> _position;
		
		private System.Nullable<long> _subjectid;
		
		private EntityRef<subject> _subject;
		
		private EntityRef<exam_template> _exam_template;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OntemplateidChanging(int value);
    partial void OntemplateidChanged();
    partial void OnpositionChanging(System.Nullable<byte> value);
    partial void OnpositionChanged();
    partial void OnsubjectidChanging(System.Nullable<long> value);
    partial void OnsubjectidChanged();
    #endregion
		
		public exam_template_subject()
		{
			this._subject = default(EntityRef<subject>);
			this._exam_template = default(EntityRef<exam_template>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(10)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_templateid", DbType="Int NOT NULL")]
		public int templateid
		{
			get
			{
				return this._templateid;
			}
			set
			{
				if ((this._templateid != value))
				{
					if (this._exam_template.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntemplateidChanging(value);
					this.SendPropertyChanging();
					this._templateid = value;
					this.SendPropertyChanged("templateid");
					this.OntemplateidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="TinyInt")]
		public System.Nullable<byte> position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectid", DbType="BigInt")]
		public System.Nullable<long> subjectid
		{
			get
			{
				return this._subjectid;
			}
			set
			{
				if ((this._subjectid != value))
				{
					if (this._subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectidChanging(value);
					this.SendPropertyChanging();
					this._subjectid = value;
					this.SendPropertyChanged("subjectid");
					this.OnsubjectidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_exam_template_subject", Storage="_subject", ThisKey="subjectid", OtherKey="id", IsForeignKey=true)]
		public subject subject
		{
			get
			{
				return this._subject.Entity;
			}
			set
			{
				subject previousValue = this._subject.Entity;
				if (((previousValue != value) 
							|| (this._subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._subject.Entity = null;
						previousValue.exam_template_subjects.Remove(this);
					}
					this._subject.Entity = value;
					if ((value != null))
					{
						value.exam_template_subjects.Add(this);
						this._subjectid = value.id;
					}
					else
					{
						this._subjectid = default(Nullable<long>);
					}
					this.SendPropertyChanged("subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_template_exam_template_subject", Storage="_exam_template", ThisKey="templateid", OtherKey="id", IsForeignKey=true)]
		public exam_template exam_template
		{
			get
			{
				return this._exam_template.Entity;
			}
			set
			{
				exam_template previousValue = this._exam_template.Entity;
				if (((previousValue != value) 
							|| (this._exam_template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._exam_template.Entity = null;
						previousValue.exam_template_subjects.Remove(this);
					}
					this._exam_template.Entity = value;
					if ((value != null))
					{
						value.exam_template_subjects.Add(this);
						this._templateid = value.id;
					}
					else
					{
						this._templateid = default(int);
					}
					this.SendPropertyChanged("exam_template");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.exam_subjects")]
	public partial class exam_subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _examid;
		
		private string _name;
		
		private string _code;
		
		private System.Nullable<byte> _position;
		
		private System.Nullable<long> _subjectid;
		
		private EntitySet<exam_mark> _exam_marks;
		
		private EntityRef<exam> _exam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnexamidChanging(long value);
    partial void OnexamidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnpositionChanging(System.Nullable<byte> value);
    partial void OnpositionChanged();
    partial void OnsubjectidChanging(System.Nullable<long> value);
    partial void OnsubjectidChanged();
    #endregion
		
		public exam_subject()
		{
			this._exam_marks = new EntitySet<exam_mark>(new Action<exam_mark>(this.attach_exam_marks), new Action<exam_mark>(this.detach_exam_marks));
			this._exam = default(EntityRef<exam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_examid", DbType="BigInt NOT NULL")]
		public long examid
		{
			get
			{
				return this._examid;
			}
			set
			{
				if ((this._examid != value))
				{
					if (this._exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnexamidChanging(value);
					this.SendPropertyChanging();
					this._examid = value;
					this.SendPropertyChanged("examid");
					this.OnexamidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(10)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="TinyInt")]
		public System.Nullable<byte> position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectid", DbType="BigInt")]
		public System.Nullable<long> subjectid
		{
			get
			{
				return this._subjectid;
			}
			set
			{
				if ((this._subjectid != value))
				{
					this.OnsubjectidChanging(value);
					this.SendPropertyChanging();
					this._subjectid = value;
					this.SendPropertyChanged("subjectid");
					this.OnsubjectidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_subject_exam_mark", Storage="_exam_marks", ThisKey="id", OtherKey="exam_subjectid")]
		public EntitySet<exam_mark> exam_marks
		{
			get
			{
				return this._exam_marks;
			}
			set
			{
				this._exam_marks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_exam_subject", Storage="_exam", ThisKey="examid", OtherKey="id", IsForeignKey=true)]
		public exam exam
		{
			get
			{
				return this._exam.Entity;
			}
			set
			{
				exam previousValue = this._exam.Entity;
				if (((previousValue != value) 
							|| (this._exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._exam.Entity = null;
						previousValue.exam_subjects.Remove(this);
					}
					this._exam.Entity = value;
					if ((value != null))
					{
						value.exam_subjects.Add(this);
						this._examid = value.id;
					}
					else
					{
						this._examid = default(long);
					}
					this.SendPropertyChanged("exam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_exam_marks(exam_mark entity)
		{
			this.SendPropertyChanging();
			entity.exam_subject = this;
		}
		
		private void detach_exam_marks(exam_mark entity)
		{
			this.SendPropertyChanging();
			entity.exam_subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.schools")]
	public partial class school : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<eca> _ecas;
		
		private EntitySet<registration> _registrations;
		
		private EntitySet<classes_teachers_allocated> _classes_teachers_allocateds;
		
		private EntitySet<school_term> _school_terms;
		
		private EntitySet<attendance_term> _attendance_terms;
		
		private EntitySet<subject> _subjects;
		
		private EntitySet<exam_template> _exam_templates;
		
		private EntitySet<exam> _exams;
		
		private EntitySet<school_class> _school_classes;
		
		private EntitySet<school_year> _school_years;
		
		private EntitySet<user> _users;
		
		private EntitySet<fees_type> _fees_types;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public school()
		{
			this._ecas = new EntitySet<eca>(new Action<eca>(this.attach_ecas), new Action<eca>(this.detach_ecas));
			this._registrations = new EntitySet<registration>(new Action<registration>(this.attach_registrations), new Action<registration>(this.detach_registrations));
			this._classes_teachers_allocateds = new EntitySet<classes_teachers_allocated>(new Action<classes_teachers_allocated>(this.attach_classes_teachers_allocateds), new Action<classes_teachers_allocated>(this.detach_classes_teachers_allocateds));
			this._school_terms = new EntitySet<school_term>(new Action<school_term>(this.attach_school_terms), new Action<school_term>(this.detach_school_terms));
			this._attendance_terms = new EntitySet<attendance_term>(new Action<attendance_term>(this.attach_attendance_terms), new Action<attendance_term>(this.detach_attendance_terms));
			this._subjects = new EntitySet<subject>(new Action<subject>(this.attach_subjects), new Action<subject>(this.detach_subjects));
			this._exam_templates = new EntitySet<exam_template>(new Action<exam_template>(this.attach_exam_templates), new Action<exam_template>(this.detach_exam_templates));
			this._exams = new EntitySet<exam>(new Action<exam>(this.attach_exams), new Action<exam>(this.detach_exams));
			this._school_classes = new EntitySet<school_class>(new Action<school_class>(this.attach_school_classes), new Action<school_class>(this.detach_school_classes));
			this._school_years = new EntitySet<school_year>(new Action<school_year>(this.attach_school_years), new Action<school_year>(this.detach_school_years));
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			this._fees_types = new EntitySet<fees_type>(new Action<fees_type>(this.attach_fees_types), new Action<fees_type>(this.detach_fees_types));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_eca", Storage="_ecas", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<eca> ecas
		{
			get
			{
				return this._ecas;
			}
			set
			{
				this._ecas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_registration", Storage="_registrations", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<registration> registrations
		{
			get
			{
				return this._registrations;
			}
			set
			{
				this._registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_classes_teachers_allocated", Storage="_classes_teachers_allocateds", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<classes_teachers_allocated> classes_teachers_allocateds
		{
			get
			{
				return this._classes_teachers_allocateds;
			}
			set
			{
				this._classes_teachers_allocateds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_school_term", Storage="_school_terms", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<school_term> school_terms
		{
			get
			{
				return this._school_terms;
			}
			set
			{
				this._school_terms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_attendance_term", Storage="_attendance_terms", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<attendance_term> attendance_terms
		{
			get
			{
				return this._attendance_terms;
			}
			set
			{
				this._attendance_terms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_subject", Storage="_subjects", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<subject> subjects
		{
			get
			{
				return this._subjects;
			}
			set
			{
				this._subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_exam_template", Storage="_exam_templates", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<exam_template> exam_templates
		{
			get
			{
				return this._exam_templates;
			}
			set
			{
				this._exam_templates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_exam", Storage="_exams", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<exam> exams
		{
			get
			{
				return this._exams;
			}
			set
			{
				this._exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_school_class", Storage="_school_classes", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<school_class> school_classes
		{
			get
			{
				return this._school_classes;
			}
			set
			{
				this._school_classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_school_year", Storage="_school_years", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<school_year> school_years
		{
			get
			{
				return this._school_years;
			}
			set
			{
				this._school_years.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_user", Storage="_users", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_fees_type", Storage="_fees_types", ThisKey="id", OtherKey="schoolid")]
		public EntitySet<fees_type> fees_types
		{
			get
			{
				return this._fees_types;
			}
			set
			{
				this._fees_types.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ecas(eca entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_ecas(eca entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_registrations(registration entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_registrations(registration entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_classes_teachers_allocateds(classes_teachers_allocated entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_classes_teachers_allocateds(classes_teachers_allocated entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_school_terms(school_term entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_school_terms(school_term entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_attendance_terms(attendance_term entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_attendance_terms(attendance_term entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_subjects(subject entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_subjects(subject entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_exam_templates(exam_template entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_exam_templates(exam_template entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_exams(exam entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_exams(exam entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_school_classes(school_class entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_school_classes(school_class entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_school_years(school_year entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_school_years(school_year entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
		
		private void attach_fees_types(fees_type entity)
		{
			this.SendPropertyChanging();
			entity.school = this;
		}
		
		private void detach_fees_types(fees_type entity)
		{
			this.SendPropertyChanging();
			entity.school = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.homework_answers")]
	public partial class homework_answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _url;
		
		private long _homeworkid;
		
		private string _filename;
		
		private long _size;
		
		private long _homeworkstudentid;
		
		private System.DateTime _created;
		
		private EntityRef<homework> _homework;
		
		private EntityRef<homework_student> _homework_student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnhomeworkidChanging(long value);
    partial void OnhomeworkidChanged();
    partial void OnfilenameChanging(string value);
    partial void OnfilenameChanged();
    partial void OnsizeChanging(long value);
    partial void OnsizeChanged();
    partial void OnhomeworkstudentidChanging(long value);
    partial void OnhomeworkstudentidChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    #endregion
		
		public homework_answer()
		{
			this._homework = default(EntityRef<homework>);
			this._homework_student = default(EntityRef<homework_student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_homeworkid", DbType="BigInt NOT NULL")]
		public long homeworkid
		{
			get
			{
				return this._homeworkid;
			}
			set
			{
				if ((this._homeworkid != value))
				{
					if (this._homework.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhomeworkidChanging(value);
					this.SendPropertyChanging();
					this._homeworkid = value;
					this.SendPropertyChanged("homeworkid");
					this.OnhomeworkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filename", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string filename
		{
			get
			{
				return this._filename;
			}
			set
			{
				if ((this._filename != value))
				{
					this.OnfilenameChanging(value);
					this.SendPropertyChanging();
					this._filename = value;
					this.SendPropertyChanged("filename");
					this.OnfilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="BigInt NOT NULL")]
		public long size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_homeworkstudentid", DbType="BigInt NOT NULL")]
		public long homeworkstudentid
		{
			get
			{
				return this._homeworkstudentid;
			}
			set
			{
				if ((this._homeworkstudentid != value))
				{
					if (this._homework_student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhomeworkstudentidChanging(value);
					this.SendPropertyChanging();
					this._homeworkstudentid = value;
					this.SendPropertyChanged("homeworkstudentid");
					this.OnhomeworkstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_homework_answer", Storage="_homework", ThisKey="homeworkid", OtherKey="id", IsForeignKey=true)]
		public homework homework
		{
			get
			{
				return this._homework.Entity;
			}
			set
			{
				homework previousValue = this._homework.Entity;
				if (((previousValue != value) 
							|| (this._homework.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._homework.Entity = null;
						previousValue.homework_answers.Remove(this);
					}
					this._homework.Entity = value;
					if ((value != null))
					{
						value.homework_answers.Add(this);
						this._homeworkid = value.id;
					}
					else
					{
						this._homeworkid = default(long);
					}
					this.SendPropertyChanged("homework");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_student_homework_answer", Storage="_homework_student", ThisKey="homeworkstudentid", OtherKey="id", IsForeignKey=true)]
		public homework_student homework_student
		{
			get
			{
				return this._homework_student.Entity;
			}
			set
			{
				homework_student previousValue = this._homework_student.Entity;
				if (((previousValue != value) 
							|| (this._homework_student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._homework_student.Entity = null;
						previousValue.homework_answers.Remove(this);
					}
					this._homework_student.Entity = value;
					if ((value != null))
					{
						value.homework_answers.Add(this);
						this._homeworkstudentid = value.id;
					}
					else
					{
						this._homeworkstudentid = default(long);
					}
					this.SendPropertyChanged("homework_student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.homeworks")]
	public partial class homework : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _message;
		
		private long _subjectid;
		
		private System.DateTime _created;
		
		private long _creator;
		
		private string _title;
		
		private bool _notifyme;
		
		private EntitySet<homework_class> _homework_classes;
		
		private EntitySet<homework_file> _homework_files;
		
		private EntitySet<homework_answer> _homework_answers;
		
		private EntitySet<homework_student> _homework_students;
		
		private EntityRef<subject> _subject;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OnsubjectidChanging(long value);
    partial void OnsubjectidChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OncreatorChanging(long value);
    partial void OncreatorChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnnotifymeChanging(bool value);
    partial void OnnotifymeChanged();
    #endregion
		
		public homework()
		{
			this._homework_classes = new EntitySet<homework_class>(new Action<homework_class>(this.attach_homework_classes), new Action<homework_class>(this.detach_homework_classes));
			this._homework_files = new EntitySet<homework_file>(new Action<homework_file>(this.attach_homework_files), new Action<homework_file>(this.detach_homework_files));
			this._homework_answers = new EntitySet<homework_answer>(new Action<homework_answer>(this.attach_homework_answers), new Action<homework_answer>(this.detach_homework_answers));
			this._homework_students = new EntitySet<homework_student>(new Action<homework_student>(this.attach_homework_students), new Action<homework_student>(this.detach_homework_students));
			this._subject = default(EntityRef<subject>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectid", DbType="BigInt NOT NULL")]
		public long subjectid
		{
			get
			{
				return this._subjectid;
			}
			set
			{
				if ((this._subjectid != value))
				{
					if (this._subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectidChanging(value);
					this.SendPropertyChanging();
					this._subjectid = value;
					this.SendPropertyChanged("subjectid");
					this.OnsubjectidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator", DbType="BigInt NOT NULL")]
		public long creator
		{
			get
			{
				return this._creator;
			}
			set
			{
				if ((this._creator != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorChanging(value);
					this.SendPropertyChanging();
					this._creator = value;
					this.SendPropertyChanged("creator");
					this.OncreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notifyme", DbType="Bit NOT NULL")]
		public bool notifyme
		{
			get
			{
				return this._notifyme;
			}
			set
			{
				if ((this._notifyme != value))
				{
					this.OnnotifymeChanging(value);
					this.SendPropertyChanging();
					this._notifyme = value;
					this.SendPropertyChanged("notifyme");
					this.OnnotifymeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_homework_class", Storage="_homework_classes", ThisKey="id", OtherKey="homeworkid")]
		public EntitySet<homework_class> homework_classes
		{
			get
			{
				return this._homework_classes;
			}
			set
			{
				this._homework_classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_homework_file", Storage="_homework_files", ThisKey="id", OtherKey="homeworkid")]
		public EntitySet<homework_file> homework_files
		{
			get
			{
				return this._homework_files;
			}
			set
			{
				this._homework_files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_homework_answer", Storage="_homework_answers", ThisKey="id", OtherKey="homeworkid")]
		public EntitySet<homework_answer> homework_answers
		{
			get
			{
				return this._homework_answers;
			}
			set
			{
				this._homework_answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_homework_student", Storage="_homework_students", ThisKey="id", OtherKey="homeworkid")]
		public EntitySet<homework_student> homework_students
		{
			get
			{
				return this._homework_students;
			}
			set
			{
				this._homework_students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_homework", Storage="_subject", ThisKey="subjectid", OtherKey="id", IsForeignKey=true)]
		public subject subject
		{
			get
			{
				return this._subject.Entity;
			}
			set
			{
				subject previousValue = this._subject.Entity;
				if (((previousValue != value) 
							|| (this._subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._subject.Entity = null;
						previousValue.homeworks.Remove(this);
					}
					this._subject.Entity = value;
					if ((value != null))
					{
						value.homeworks.Add(this);
						this._subjectid = value.id;
					}
					else
					{
						this._subjectid = default(long);
					}
					this.SendPropertyChanged("subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_homework", Storage="_user", ThisKey="creator", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.homeworks.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.homeworks.Add(this);
						this._creator = value.id;
					}
					else
					{
						this._creator = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_homework_classes(homework_class entity)
		{
			this.SendPropertyChanging();
			entity.homework = this;
		}
		
		private void detach_homework_classes(homework_class entity)
		{
			this.SendPropertyChanging();
			entity.homework = null;
		}
		
		private void attach_homework_files(homework_file entity)
		{
			this.SendPropertyChanging();
			entity.homework = this;
		}
		
		private void detach_homework_files(homework_file entity)
		{
			this.SendPropertyChanging();
			entity.homework = null;
		}
		
		private void attach_homework_answers(homework_answer entity)
		{
			this.SendPropertyChanging();
			entity.homework = this;
		}
		
		private void detach_homework_answers(homework_answer entity)
		{
			this.SendPropertyChanging();
			entity.homework = null;
		}
		
		private void attach_homework_students(homework_student entity)
		{
			this.SendPropertyChanging();
			entity.homework = this;
		}
		
		private void detach_homework_students(homework_student entity)
		{
			this.SendPropertyChanging();
			entity.homework = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.homework_students")]
	public partial class homework_student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _studentid;
		
		private long _homeworkid;
		
		private int _classid;
		
		private string _marks;
		
		private EntitySet<homework_answer> _homework_answers;
		
		private EntityRef<homework> _homework;
		
		private EntityRef<school_class> _school_class;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void OnhomeworkidChanging(long value);
    partial void OnhomeworkidChanged();
    partial void OnclassidChanging(int value);
    partial void OnclassidChanged();
    partial void OnmarksChanging(string value);
    partial void OnmarksChanged();
    #endregion
		
		public homework_student()
		{
			this._homework_answers = new EntitySet<homework_answer>(new Action<homework_answer>(this.attach_homework_answers), new Action<homework_answer>(this.detach_homework_answers));
			this._homework = default(EntityRef<homework>);
			this._school_class = default(EntityRef<school_class>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_homeworkid", DbType="BigInt NOT NULL")]
		public long homeworkid
		{
			get
			{
				return this._homeworkid;
			}
			set
			{
				if ((this._homeworkid != value))
				{
					if (this._homework.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhomeworkidChanging(value);
					this.SendPropertyChanging();
					this._homeworkid = value;
					this.SendPropertyChanged("homeworkid");
					this.OnhomeworkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classid", DbType="Int NOT NULL")]
		public int classid
		{
			get
			{
				return this._classid;
			}
			set
			{
				if ((this._classid != value))
				{
					if (this._school_class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassidChanging(value);
					this.SendPropertyChanging();
					this._classid = value;
					this.SendPropertyChanged("classid");
					this.OnclassidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marks", DbType="VarChar(3)")]
		public string marks
		{
			get
			{
				return this._marks;
			}
			set
			{
				if ((this._marks != value))
				{
					this.OnmarksChanging(value);
					this.SendPropertyChanging();
					this._marks = value;
					this.SendPropertyChanged("marks");
					this.OnmarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_student_homework_answer", Storage="_homework_answers", ThisKey="id", OtherKey="homeworkstudentid")]
		public EntitySet<homework_answer> homework_answers
		{
			get
			{
				return this._homework_answers;
			}
			set
			{
				this._homework_answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="homework_homework_student", Storage="_homework", ThisKey="homeworkid", OtherKey="id", IsForeignKey=true)]
		public homework homework
		{
			get
			{
				return this._homework.Entity;
			}
			set
			{
				homework previousValue = this._homework.Entity;
				if (((previousValue != value) 
							|| (this._homework.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._homework.Entity = null;
						previousValue.homework_students.Remove(this);
					}
					this._homework.Entity = value;
					if ((value != null))
					{
						value.homework_students.Add(this);
						this._homeworkid = value.id;
					}
					else
					{
						this._homeworkid = default(long);
					}
					this.SendPropertyChanged("homework");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_homework_student", Storage="_school_class", ThisKey="classid", OtherKey="id", IsForeignKey=true)]
		public school_class school_class
		{
			get
			{
				return this._school_class.Entity;
			}
			set
			{
				school_class previousValue = this._school_class.Entity;
				if (((previousValue != value) 
							|| (this._school_class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_class.Entity = null;
						previousValue.homework_students.Remove(this);
					}
					this._school_class.Entity = value;
					if ((value != null))
					{
						value.homework_students.Add(this);
						this._classid = value.id;
					}
					else
					{
						this._classid = default(int);
					}
					this.SendPropertyChanged("school_class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_homework_student", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.homework_students.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.homework_students.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_homework_answers(homework_answer entity)
		{
			this.SendPropertyChanging();
			entity.homework_student = this;
		}
		
		private void detach_homework_answers(homework_answer entity)
		{
			this.SendPropertyChanging();
			entity.homework_student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.leaves")]
	public partial class leave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _defaultTotal;
		
		private EntitySet<leaves_allocated> _leaves_allocateds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndefaultTotalChanging(System.Nullable<int> value);
    partial void OndefaultTotalChanged();
    #endregion
		
		public leave()
		{
			this._leaves_allocateds = new EntitySet<leaves_allocated>(new Action<leaves_allocated>(this.attach_leaves_allocateds), new Action<leaves_allocated>(this.detach_leaves_allocateds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_defaultTotal", DbType="Int")]
		public System.Nullable<int> defaultTotal
		{
			get
			{
				return this._defaultTotal;
			}
			set
			{
				if ((this._defaultTotal != value))
				{
					this.OndefaultTotalChanging(value);
					this.SendPropertyChanging();
					this._defaultTotal = value;
					this.SendPropertyChanged("defaultTotal");
					this.OndefaultTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="leave_leaves_allocated", Storage="_leaves_allocateds", ThisKey="id", OtherKey="type")]
		public EntitySet<leaves_allocated> leaves_allocateds
		{
			get
			{
				return this._leaves_allocateds;
			}
			set
			{
				this._leaves_allocateds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_leaves_allocateds(leaves_allocated entity)
		{
			this.SendPropertyChanging();
			entity.leave = this;
		}
		
		private void detach_leaves_allocateds(leaves_allocated entity)
		{
			this.SendPropertyChanging();
			entity.leave = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.leaves_allocated")]
	public partial class leaves_allocated : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _type;
		
		private long _staffid;
		
		private System.Nullable<int> _annualTotal;
		
		private System.Nullable<decimal> _remaining;
		
		private EntitySet<leaves_taken> _leaves_takens;
		
		private EntityRef<leave> _leave;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    partial void OnstaffidChanging(long value);
    partial void OnstaffidChanged();
    partial void OnannualTotalChanging(System.Nullable<int> value);
    partial void OnannualTotalChanged();
    partial void OnremainingChanging(System.Nullable<decimal> value);
    partial void OnremainingChanged();
    #endregion
		
		public leaves_allocated()
		{
			this._leaves_takens = new EntitySet<leaves_taken>(new Action<leaves_taken>(this.attach_leaves_takens), new Action<leaves_taken>(this.detach_leaves_takens));
			this._leave = default(EntityRef<leave>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._leave.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffid", DbType="BigInt NOT NULL")]
		public long staffid
		{
			get
			{
				return this._staffid;
			}
			set
			{
				if ((this._staffid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaffidChanging(value);
					this.SendPropertyChanging();
					this._staffid = value;
					this.SendPropertyChanged("staffid");
					this.OnstaffidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_annualTotal", DbType="Int")]
		public System.Nullable<int> annualTotal
		{
			get
			{
				return this._annualTotal;
			}
			set
			{
				if ((this._annualTotal != value))
				{
					this.OnannualTotalChanging(value);
					this.SendPropertyChanging();
					this._annualTotal = value;
					this.SendPropertyChanged("annualTotal");
					this.OnannualTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remaining", DbType="Decimal(4,1)")]
		public System.Nullable<decimal> remaining
		{
			get
			{
				return this._remaining;
			}
			set
			{
				if ((this._remaining != value))
				{
					this.OnremainingChanging(value);
					this.SendPropertyChanging();
					this._remaining = value;
					this.SendPropertyChanged("remaining");
					this.OnremainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="leaves_allocated_leaves_taken", Storage="_leaves_takens", ThisKey="id", OtherKey="allocatedid")]
		public EntitySet<leaves_taken> leaves_takens
		{
			get
			{
				return this._leaves_takens;
			}
			set
			{
				this._leaves_takens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="leave_leaves_allocated", Storage="_leave", ThisKey="type", OtherKey="id", IsForeignKey=true)]
		public leave leave
		{
			get
			{
				return this._leave.Entity;
			}
			set
			{
				leave previousValue = this._leave.Entity;
				if (((previousValue != value) 
							|| (this._leave.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._leave.Entity = null;
						previousValue.leaves_allocateds.Remove(this);
					}
					this._leave.Entity = value;
					if ((value != null))
					{
						value.leaves_allocateds.Add(this);
						this._type = value.id;
					}
					else
					{
						this._type = default(int);
					}
					this.SendPropertyChanged("leave");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_leaves_allocated", Storage="_user", ThisKey="staffid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.leaves_allocateds.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.leaves_allocateds.Add(this);
						this._staffid = value.id;
					}
					else
					{
						this._staffid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_leaves_takens(leaves_taken entity)
		{
			this.SendPropertyChanging();
			entity.leaves_allocated = this;
		}
		
		private void detach_leaves_takens(leaves_taken entity)
		{
			this.SendPropertyChanging();
			entity.leaves_allocated = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.leaves_taken")]
	public partial class leaves_taken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _allocatedid;
		
		private System.DateTime _startdate;
		
		private byte _starttime;
		
		private System.DateTime _enddate;
		
		private byte _endtime;
		
		private byte _status;
		
		private string _details;
		
		private long _staffid;
		
		private string _reason;
		
		private decimal _days;
		
		private EntityRef<leaves_allocated> _leaves_allocated;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnallocatedidChanging(long value);
    partial void OnallocatedidChanged();
    partial void OnstartdateChanging(System.DateTime value);
    partial void OnstartdateChanged();
    partial void OnstarttimeChanging(byte value);
    partial void OnstarttimeChanged();
    partial void OnenddateChanging(System.DateTime value);
    partial void OnenddateChanged();
    partial void OnendtimeChanging(byte value);
    partial void OnendtimeChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OndetailsChanging(string value);
    partial void OndetailsChanged();
    partial void OnstaffidChanging(long value);
    partial void OnstaffidChanged();
    partial void OnreasonChanging(string value);
    partial void OnreasonChanged();
    partial void OndaysChanging(decimal value);
    partial void OndaysChanged();
    #endregion
		
		public leaves_taken()
		{
			this._leaves_allocated = default(EntityRef<leaves_allocated>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allocatedid", DbType="BigInt NOT NULL")]
		public long allocatedid
		{
			get
			{
				return this._allocatedid;
			}
			set
			{
				if ((this._allocatedid != value))
				{
					if (this._leaves_allocated.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnallocatedidChanging(value);
					this.SendPropertyChanging();
					this._allocatedid = value;
					this.SendPropertyChanged("allocatedid");
					this.OnallocatedidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startdate", DbType="DateTime NOT NULL")]
		public System.DateTime startdate
		{
			get
			{
				return this._startdate;
			}
			set
			{
				if ((this._startdate != value))
				{
					this.OnstartdateChanging(value);
					this.SendPropertyChanging();
					this._startdate = value;
					this.SendPropertyChanged("startdate");
					this.OnstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_starttime", DbType="TinyInt NOT NULL")]
		public byte starttime
		{
			get
			{
				return this._starttime;
			}
			set
			{
				if ((this._starttime != value))
				{
					this.OnstarttimeChanging(value);
					this.SendPropertyChanging();
					this._starttime = value;
					this.SendPropertyChanged("starttime");
					this.OnstarttimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enddate", DbType="DateTime NOT NULL")]
		public System.DateTime enddate
		{
			get
			{
				return this._enddate;
			}
			set
			{
				if ((this._enddate != value))
				{
					this.OnenddateChanging(value);
					this.SendPropertyChanging();
					this._enddate = value;
					this.SendPropertyChanged("enddate");
					this.OnenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endtime", DbType="TinyInt NOT NULL")]
		public byte endtime
		{
			get
			{
				return this._endtime;
			}
			set
			{
				if ((this._endtime != value))
				{
					this.OnendtimeChanging(value);
					this.SendPropertyChanging();
					this._endtime = value;
					this.SendPropertyChanged("endtime");
					this.OnendtimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_details", DbType="NVarChar(1000)")]
		public string details
		{
			get
			{
				return this._details;
			}
			set
			{
				if ((this._details != value))
				{
					this.OndetailsChanging(value);
					this.SendPropertyChanging();
					this._details = value;
					this.SendPropertyChanged("details");
					this.OndetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffid", DbType="BigInt NOT NULL")]
		public long staffid
		{
			get
			{
				return this._staffid;
			}
			set
			{
				if ((this._staffid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaffidChanging(value);
					this.SendPropertyChanging();
					this._staffid = value;
					this.SendPropertyChanged("staffid");
					this.OnstaffidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reason", DbType="NVarChar(1000)")]
		public string reason
		{
			get
			{
				return this._reason;
			}
			set
			{
				if ((this._reason != value))
				{
					this.OnreasonChanging(value);
					this.SendPropertyChanging();
					this._reason = value;
					this.SendPropertyChanged("reason");
					this.OnreasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_days", DbType="Decimal(4,1) NOT NULL")]
		public decimal days
		{
			get
			{
				return this._days;
			}
			set
			{
				if ((this._days != value))
				{
					this.OndaysChanging(value);
					this.SendPropertyChanging();
					this._days = value;
					this.SendPropertyChanged("days");
					this.OndaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="leaves_allocated_leaves_taken", Storage="_leaves_allocated", ThisKey="allocatedid", OtherKey="id", IsForeignKey=true)]
		public leaves_allocated leaves_allocated
		{
			get
			{
				return this._leaves_allocated.Entity;
			}
			set
			{
				leaves_allocated previousValue = this._leaves_allocated.Entity;
				if (((previousValue != value) 
							|| (this._leaves_allocated.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._leaves_allocated.Entity = null;
						previousValue.leaves_takens.Remove(this);
					}
					this._leaves_allocated.Entity = value;
					if ((value != null))
					{
						value.leaves_takens.Add(this);
						this._allocatedid = value.id;
					}
					else
					{
						this._allocatedid = default(long);
					}
					this.SendPropertyChanged("leaves_allocated");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_leaves_taken", Storage="_user", ThisKey="staffid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.leaves_takens.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.leaves_takens.Add(this);
						this._staffid = value.id;
					}
					else
					{
						this._staffid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employments")]
	public partial class employment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<System.DateTime> _start_date;
		
		private System.Nullable<System.DateTime> _end_date;
		
		private long _userid;
		
		private string _remarks;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onstart_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onstart_dateChanged();
    partial void Onend_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onend_dateChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnremarksChanging(string value);
    partial void OnremarksChanged();
    #endregion
		
		public employment()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start_date", DbType="Date")]
		public System.Nullable<System.DateTime> start_date
		{
			get
			{
				return this._start_date;
			}
			set
			{
				if ((this._start_date != value))
				{
					this.Onstart_dateChanging(value);
					this.SendPropertyChanging();
					this._start_date = value;
					this.SendPropertyChanged("start_date");
					this.Onstart_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_date", DbType="Date")]
		public System.Nullable<System.DateTime> end_date
		{
			get
			{
				return this._end_date;
			}
			set
			{
				if ((this._end_date != value))
				{
					this.Onend_dateChanging(value);
					this.SendPropertyChanging();
					this._end_date = value;
					this.SendPropertyChanged("end_date");
					this.Onend_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remarks", DbType="NVarChar(500)")]
		public string remarks
		{
			get
			{
				return this._remarks;
			}
			set
			{
				if ((this._remarks != value))
				{
					this.OnremarksChanging(value);
					this.SendPropertyChanging();
					this._remarks = value;
					this.SendPropertyChanged("remarks");
					this.OnremarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_employment", Storage="_user", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.employments.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.employments.Add(this);
						this._userid = value.id;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.exam_templates")]
	public partial class exam_template : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _schoolid;
		
		private short _maxMark;
		
		private System.Nullable<long> _creator;
		
		private string _description;
		
		private bool _isprivate;
		
		private EntitySet<exam_template_subject> _exam_template_subjects;
		
		private EntityRef<school> _school;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    partial void OnmaxMarkChanging(short value);
    partial void OnmaxMarkChanged();
    partial void OncreatorChanging(System.Nullable<long> value);
    partial void OncreatorChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnisprivateChanging(bool value);
    partial void OnisprivateChanged();
    #endregion
		
		public exam_template()
		{
			this._exam_template_subjects = new EntitySet<exam_template_subject>(new Action<exam_template_subject>(this.attach_exam_template_subjects), new Action<exam_template_subject>(this.detach_exam_template_subjects));
			this._school = default(EntityRef<school>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxMark", DbType="SmallInt NOT NULL")]
		public short maxMark
		{
			get
			{
				return this._maxMark;
			}
			set
			{
				if ((this._maxMark != value))
				{
					this.OnmaxMarkChanging(value);
					this.SendPropertyChanging();
					this._maxMark = value;
					this.SendPropertyChanged("maxMark");
					this.OnmaxMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator", DbType="BigInt")]
		public System.Nullable<long> creator
		{
			get
			{
				return this._creator;
			}
			set
			{
				if ((this._creator != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorChanging(value);
					this.SendPropertyChanging();
					this._creator = value;
					this.SendPropertyChanged("creator");
					this.OncreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(500)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isprivate", DbType="Bit NOT NULL")]
		public bool isprivate
		{
			get
			{
				return this._isprivate;
			}
			set
			{
				if ((this._isprivate != value))
				{
					this.OnisprivateChanging(value);
					this.SendPropertyChanging();
					this._isprivate = value;
					this.SendPropertyChanged("isprivate");
					this.OnisprivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_template_exam_template_subject", Storage="_exam_template_subjects", ThisKey="id", OtherKey="templateid")]
		public EntitySet<exam_template_subject> exam_template_subjects
		{
			get
			{
				return this._exam_template_subjects;
			}
			set
			{
				this._exam_template_subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_exam_template", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.exam_templates.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.exam_templates.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_exam_template", Storage="_user", ThisKey="creator", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.exam_templates.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.exam_templates.Add(this);
						this._creator = value.id;
					}
					else
					{
						this._creator = default(Nullable<long>);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_exam_template_subjects(exam_template_subject entity)
		{
			this.SendPropertyChanging();
			entity.exam_template = this;
		}
		
		private void detach_exam_template_subjects(exam_template_subject entity)
		{
			this.SendPropertyChanging();
			entity.exam_template = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.exams")]
	public partial class exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private System.DateTime _exam_date;
		
		private int _schoolid;
		
		private int _year;
		
		private long _creator;
		
		private string _description;
		
		private short _maxMark;
		
		private EntitySet<exam_class> _exam_classes;
		
		private EntitySet<exam_mark> _exam_marks;
		
		private EntitySet<exam_subject> _exam_subjects;
		
		private EntityRef<school> _school;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onexam_dateChanging(System.DateTime value);
    partial void Onexam_dateChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OncreatorChanging(long value);
    partial void OncreatorChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnmaxMarkChanging(short value);
    partial void OnmaxMarkChanged();
    #endregion
		
		public exam()
		{
			this._exam_classes = new EntitySet<exam_class>(new Action<exam_class>(this.attach_exam_classes), new Action<exam_class>(this.detach_exam_classes));
			this._exam_marks = new EntitySet<exam_mark>(new Action<exam_mark>(this.attach_exam_marks), new Action<exam_mark>(this.detach_exam_marks));
			this._exam_subjects = new EntitySet<exam_subject>(new Action<exam_subject>(this.attach_exam_subjects), new Action<exam_subject>(this.detach_exam_subjects));
			this._school = default(EntityRef<school>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_date", DbType="DateTime NOT NULL")]
		public System.DateTime exam_date
		{
			get
			{
				return this._exam_date;
			}
			set
			{
				if ((this._exam_date != value))
				{
					this.Onexam_dateChanging(value);
					this.SendPropertyChanging();
					this._exam_date = value;
					this.SendPropertyChanged("exam_date");
					this.Onexam_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator", DbType="BigInt NOT NULL")]
		public long creator
		{
			get
			{
				return this._creator;
			}
			set
			{
				if ((this._creator != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorChanging(value);
					this.SendPropertyChanging();
					this._creator = value;
					this.SendPropertyChanged("creator");
					this.OncreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(500)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxMark", DbType="SmallInt NOT NULL")]
		public short maxMark
		{
			get
			{
				return this._maxMark;
			}
			set
			{
				if ((this._maxMark != value))
				{
					this.OnmaxMarkChanging(value);
					this.SendPropertyChanging();
					this._maxMark = value;
					this.SendPropertyChanged("maxMark");
					this.OnmaxMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_exam_class", Storage="_exam_classes", ThisKey="id", OtherKey="examid")]
		public EntitySet<exam_class> exam_classes
		{
			get
			{
				return this._exam_classes;
			}
			set
			{
				this._exam_classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_exam_mark", Storage="_exam_marks", ThisKey="id", OtherKey="examid")]
		public EntitySet<exam_mark> exam_marks
		{
			get
			{
				return this._exam_marks;
			}
			set
			{
				this._exam_marks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_exam_subject", Storage="_exam_subjects", ThisKey="id", OtherKey="examid")]
		public EntitySet<exam_subject> exam_subjects
		{
			get
			{
				return this._exam_subjects;
			}
			set
			{
				this._exam_subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_exam", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.exams.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.exams.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_exam", Storage="_user", ThisKey="creator", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.exams.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.exams.Add(this);
						this._creator = value.id;
					}
					else
					{
						this._creator = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_exam_classes(exam_class entity)
		{
			this.SendPropertyChanging();
			entity.exam = this;
		}
		
		private void detach_exam_classes(exam_class entity)
		{
			this.SendPropertyChanging();
			entity.exam = null;
		}
		
		private void attach_exam_marks(exam_mark entity)
		{
			this.SendPropertyChanging();
			entity.exam = this;
		}
		
		private void detach_exam_marks(exam_mark entity)
		{
			this.SendPropertyChanging();
			entity.exam = null;
		}
		
		private void attach_exam_subjects(exam_subject entity)
		{
			this.SendPropertyChanging();
			entity.exam = this;
		}
		
		private void detach_exam_subjects(exam_subject entity)
		{
			this.SendPropertyChanging();
			entity.exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.school_classes")]
	public partial class school_class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _schoolid;
		
		private System.Nullable<int> _nextclass;
		
		private int _schoolyearid;
		
		private EntitySet<exam_class> _exam_classes;
		
		private EntitySet<homework_class> _homework_classes;
		
		private EntitySet<classes_teachers_allocated> _classes_teachers_allocateds;
		
		private EntitySet<classes_students_allocated> _classes_students_allocateds;
		
		private EntitySet<subject_teacher> _subject_teachers;
		
		private EntitySet<homework_student> _homework_students;
		
		private EntitySet<school_class> _school_classes;
		
		private EntitySet<attendance> _attendances;
		
		private EntityRef<school> _school;
		
		private EntityRef<school_class> _school_class1;
		
		private EntityRef<school_year> _school_year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    partial void OnnextclassChanging(System.Nullable<int> value);
    partial void OnnextclassChanged();
    partial void OnschoolyearidChanging(int value);
    partial void OnschoolyearidChanged();
    #endregion
		
		public school_class()
		{
			this._exam_classes = new EntitySet<exam_class>(new Action<exam_class>(this.attach_exam_classes), new Action<exam_class>(this.detach_exam_classes));
			this._homework_classes = new EntitySet<homework_class>(new Action<homework_class>(this.attach_homework_classes), new Action<homework_class>(this.detach_homework_classes));
			this._classes_teachers_allocateds = new EntitySet<classes_teachers_allocated>(new Action<classes_teachers_allocated>(this.attach_classes_teachers_allocateds), new Action<classes_teachers_allocated>(this.detach_classes_teachers_allocateds));
			this._classes_students_allocateds = new EntitySet<classes_students_allocated>(new Action<classes_students_allocated>(this.attach_classes_students_allocateds), new Action<classes_students_allocated>(this.detach_classes_students_allocateds));
			this._subject_teachers = new EntitySet<subject_teacher>(new Action<subject_teacher>(this.attach_subject_teachers), new Action<subject_teacher>(this.detach_subject_teachers));
			this._homework_students = new EntitySet<homework_student>(new Action<homework_student>(this.attach_homework_students), new Action<homework_student>(this.detach_homework_students));
			this._school_classes = new EntitySet<school_class>(new Action<school_class>(this.attach_school_classes), new Action<school_class>(this.detach_school_classes));
			this._attendances = new EntitySet<attendance>(new Action<attendance>(this.attach_attendances), new Action<attendance>(this.detach_attendances));
			this._school = default(EntityRef<school>);
			this._school_class1 = default(EntityRef<school_class>);
			this._school_year = default(EntityRef<school_year>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nextclass", DbType="Int")]
		public System.Nullable<int> nextclass
		{
			get
			{
				return this._nextclass;
			}
			set
			{
				if ((this._nextclass != value))
				{
					if (this._school_class1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnextclassChanging(value);
					this.SendPropertyChanging();
					this._nextclass = value;
					this.SendPropertyChanged("nextclass");
					this.OnnextclassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolyearid", DbType="Int NOT NULL")]
		public int schoolyearid
		{
			get
			{
				return this._schoolyearid;
			}
			set
			{
				if ((this._schoolyearid != value))
				{
					if (this._school_year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolyearidChanging(value);
					this.SendPropertyChanging();
					this._schoolyearid = value;
					this.SendPropertyChanged("schoolyearid");
					this.OnschoolyearidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_exam_class", Storage="_exam_classes", ThisKey="id", OtherKey="classid")]
		public EntitySet<exam_class> exam_classes
		{
			get
			{
				return this._exam_classes;
			}
			set
			{
				this._exam_classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_homework_class", Storage="_homework_classes", ThisKey="id", OtherKey="classid")]
		public EntitySet<homework_class> homework_classes
		{
			get
			{
				return this._homework_classes;
			}
			set
			{
				this._homework_classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_classes_teachers_allocated", Storage="_classes_teachers_allocateds", ThisKey="id", OtherKey="classid")]
		public EntitySet<classes_teachers_allocated> classes_teachers_allocateds
		{
			get
			{
				return this._classes_teachers_allocateds;
			}
			set
			{
				this._classes_teachers_allocateds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_classes_students_allocated", Storage="_classes_students_allocateds", ThisKey="id", OtherKey="classid")]
		public EntitySet<classes_students_allocated> classes_students_allocateds
		{
			get
			{
				return this._classes_students_allocateds;
			}
			set
			{
				this._classes_students_allocateds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_subject_teacher", Storage="_subject_teachers", ThisKey="id", OtherKey="classid")]
		public EntitySet<subject_teacher> subject_teachers
		{
			get
			{
				return this._subject_teachers;
			}
			set
			{
				this._subject_teachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_homework_student", Storage="_homework_students", ThisKey="id", OtherKey="classid")]
		public EntitySet<homework_student> homework_students
		{
			get
			{
				return this._homework_students;
			}
			set
			{
				this._homework_students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_school_class", Storage="_school_classes", ThisKey="id", OtherKey="nextclass")]
		public EntitySet<school_class> school_classes
		{
			get
			{
				return this._school_classes;
			}
			set
			{
				this._school_classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_attendance", Storage="_attendances", ThisKey="id", OtherKey="classid")]
		public EntitySet<attendance> attendances
		{
			get
			{
				return this._attendances;
			}
			set
			{
				this._attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_school_class", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.school_classes.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.school_classes.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_school_class", Storage="_school_class1", ThisKey="nextclass", OtherKey="id", IsForeignKey=true)]
		public school_class school_class1
		{
			get
			{
				return this._school_class1.Entity;
			}
			set
			{
				school_class previousValue = this._school_class1.Entity;
				if (((previousValue != value) 
							|| (this._school_class1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_class1.Entity = null;
						previousValue.school_classes.Remove(this);
					}
					this._school_class1.Entity = value;
					if ((value != null))
					{
						value.school_classes.Add(this);
						this._nextclass = value.id;
					}
					else
					{
						this._nextclass = default(Nullable<int>);
					}
					this.SendPropertyChanged("school_class1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_year_school_class", Storage="_school_year", ThisKey="schoolyearid", OtherKey="id", IsForeignKey=true)]
		public school_year school_year
		{
			get
			{
				return this._school_year.Entity;
			}
			set
			{
				school_year previousValue = this._school_year.Entity;
				if (((previousValue != value) 
							|| (this._school_year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_year.Entity = null;
						previousValue.school_classes.Remove(this);
					}
					this._school_year.Entity = value;
					if ((value != null))
					{
						value.school_classes.Add(this);
						this._schoolyearid = value.id;
					}
					else
					{
						this._schoolyearid = default(int);
					}
					this.SendPropertyChanged("school_year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_exam_classes(exam_class entity)
		{
			this.SendPropertyChanging();
			entity.school_class = this;
		}
		
		private void detach_exam_classes(exam_class entity)
		{
			this.SendPropertyChanging();
			entity.school_class = null;
		}
		
		private void attach_homework_classes(homework_class entity)
		{
			this.SendPropertyChanging();
			entity.school_class = this;
		}
		
		private void detach_homework_classes(homework_class entity)
		{
			this.SendPropertyChanging();
			entity.school_class = null;
		}
		
		private void attach_classes_teachers_allocateds(classes_teachers_allocated entity)
		{
			this.SendPropertyChanging();
			entity.school_class = this;
		}
		
		private void detach_classes_teachers_allocateds(classes_teachers_allocated entity)
		{
			this.SendPropertyChanging();
			entity.school_class = null;
		}
		
		private void attach_classes_students_allocateds(classes_students_allocated entity)
		{
			this.SendPropertyChanging();
			entity.school_class = this;
		}
		
		private void detach_classes_students_allocateds(classes_students_allocated entity)
		{
			this.SendPropertyChanging();
			entity.school_class = null;
		}
		
		private void attach_subject_teachers(subject_teacher entity)
		{
			this.SendPropertyChanging();
			entity.school_class = this;
		}
		
		private void detach_subject_teachers(subject_teacher entity)
		{
			this.SendPropertyChanging();
			entity.school_class = null;
		}
		
		private void attach_homework_students(homework_student entity)
		{
			this.SendPropertyChanging();
			entity.school_class = this;
		}
		
		private void detach_homework_students(homework_student entity)
		{
			this.SendPropertyChanging();
			entity.school_class = null;
		}
		
		private void attach_school_classes(school_class entity)
		{
			this.SendPropertyChanging();
			entity.school_class1 = this;
		}
		
		private void detach_school_classes(school_class entity)
		{
			this.SendPropertyChanging();
			entity.school_class1 = null;
		}
		
		private void attach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.school_class = this;
		}
		
		private void detach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.school_class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.school_years")]
	public partial class school_year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _schoolid;
		
		private System.Nullable<int> _grademethodid;
		
		private EntitySet<registration> _registrations;
		
		private EntitySet<school_class> _school_classes;
		
		private EntityRef<school> _school;
		
		private EntityRef<grades_method> _grades_method;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    partial void OngrademethodidChanging(System.Nullable<int> value);
    partial void OngrademethodidChanged();
    #endregion
		
		public school_year()
		{
			this._registrations = new EntitySet<registration>(new Action<registration>(this.attach_registrations), new Action<registration>(this.detach_registrations));
			this._school_classes = new EntitySet<school_class>(new Action<school_class>(this.attach_school_classes), new Action<school_class>(this.detach_school_classes));
			this._school = default(EntityRef<school>);
			this._grades_method = default(EntityRef<grades_method>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grademethodid", DbType="Int")]
		public System.Nullable<int> grademethodid
		{
			get
			{
				return this._grademethodid;
			}
			set
			{
				if ((this._grademethodid != value))
				{
					if (this._grades_method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngrademethodidChanging(value);
					this.SendPropertyChanging();
					this._grademethodid = value;
					this.SendPropertyChanged("grademethodid");
					this.OngrademethodidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_year_registration", Storage="_registrations", ThisKey="id", OtherKey="schoolyearid")]
		public EntitySet<registration> registrations
		{
			get
			{
				return this._registrations;
			}
			set
			{
				this._registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_year_school_class", Storage="_school_classes", ThisKey="id", OtherKey="schoolyearid")]
		public EntitySet<school_class> school_classes
		{
			get
			{
				return this._school_classes;
			}
			set
			{
				this._school_classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_school_year", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.school_years.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.school_years.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="grades_method_school_year", Storage="_grades_method", ThisKey="grademethodid", OtherKey="id", IsForeignKey=true)]
		public grades_method grades_method
		{
			get
			{
				return this._grades_method.Entity;
			}
			set
			{
				grades_method previousValue = this._grades_method.Entity;
				if (((previousValue != value) 
							|| (this._grades_method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._grades_method.Entity = null;
						previousValue.school_years.Remove(this);
					}
					this._grades_method.Entity = value;
					if ((value != null))
					{
						value.school_years.Add(this);
						this._grademethodid = value.id;
					}
					else
					{
						this._grademethodid = default(Nullable<int>);
					}
					this.SendPropertyChanged("grades_method");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_registrations(registration entity)
		{
			this.SendPropertyChanging();
			entity.school_year = this;
		}
		
		private void detach_registrations(registration entity)
		{
			this.SendPropertyChanging();
			entity.school_year = null;
		}
		
		private void attach_school_classes(school_class entity)
		{
			this.SendPropertyChanging();
			entity.school_year = this;
		}
		
		private void detach_school_classes(school_class entity)
		{
			this.SendPropertyChanging();
			entity.school_year = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.grades_methods")]
	public partial class grades_method : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<school_year> _school_years;
		
		private EntitySet<grades_rule> _grades_rules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public grades_method()
		{
			this._school_years = new EntitySet<school_year>(new Action<school_year>(this.attach_school_years), new Action<school_year>(this.detach_school_years));
			this._grades_rules = new EntitySet<grades_rule>(new Action<grades_rule>(this.attach_grades_rules), new Action<grades_rule>(this.detach_grades_rules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="grades_method_school_year", Storage="_school_years", ThisKey="id", OtherKey="grademethodid")]
		public EntitySet<school_year> school_years
		{
			get
			{
				return this._school_years;
			}
			set
			{
				this._school_years.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="grades_method_grades_rule", Storage="_grades_rules", ThisKey="id", OtherKey="methodid")]
		public EntitySet<grades_rule> grades_rules
		{
			get
			{
				return this._grades_rules;
			}
			set
			{
				this._grades_rules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_school_years(school_year entity)
		{
			this.SendPropertyChanging();
			entity.grades_method = this;
		}
		
		private void detach_school_years(school_year entity)
		{
			this.SendPropertyChanging();
			entity.grades_method = null;
		}
		
		private void attach_grades_rules(grades_rule entity)
		{
			this.SendPropertyChanging();
			entity.grades_method = this;
		}
		
		private void detach_grades_rules(grades_rule entity)
		{
			this.SendPropertyChanging();
			entity.grades_method = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.grades_rules")]
	public partial class grades_rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _methodid;
		
		private string _grade;
		
		private System.Nullable<decimal> _gradepoint;
		
		private short _mark;
		
		private EntityRef<grades_method> _grades_method;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmethodidChanging(int value);
    partial void OnmethodidChanged();
    partial void OngradeChanging(string value);
    partial void OngradeChanged();
    partial void OngradepointChanging(System.Nullable<decimal> value);
    partial void OngradepointChanged();
    partial void OnmarkChanging(short value);
    partial void OnmarkChanged();
    #endregion
		
		public grades_rule()
		{
			this._grades_method = default(EntityRef<grades_method>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_methodid", DbType="Int NOT NULL")]
		public int methodid
		{
			get
			{
				return this._methodid;
			}
			set
			{
				if ((this._methodid != value))
				{
					if (this._grades_method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmethodidChanging(value);
					this.SendPropertyChanging();
					this._methodid = value;
					this.SendPropertyChanged("methodid");
					this.OnmethodidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade", DbType="NVarChar(5)")]
		public string grade
		{
			get
			{
				return this._grade;
			}
			set
			{
				if ((this._grade != value))
				{
					this.OngradeChanging(value);
					this.SendPropertyChanging();
					this._grade = value;
					this.SendPropertyChanged("grade");
					this.OngradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gradepoint", DbType="Decimal(3,1)")]
		public System.Nullable<decimal> gradepoint
		{
			get
			{
				return this._gradepoint;
			}
			set
			{
				if ((this._gradepoint != value))
				{
					this.OngradepointChanging(value);
					this.SendPropertyChanging();
					this._gradepoint = value;
					this.SendPropertyChanged("gradepoint");
					this.OngradepointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mark", DbType="SmallInt NOT NULL")]
		public short mark
		{
			get
			{
				return this._mark;
			}
			set
			{
				if ((this._mark != value))
				{
					this.OnmarkChanging(value);
					this.SendPropertyChanging();
					this._mark = value;
					this.SendPropertyChanged("mark");
					this.OnmarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="grades_method_grades_rule", Storage="_grades_method", ThisKey="methodid", OtherKey="id", IsForeignKey=true)]
		public grades_method grades_method
		{
			get
			{
				return this._grades_method.Entity;
			}
			set
			{
				grades_method previousValue = this._grades_method.Entity;
				if (((previousValue != value) 
							|| (this._grades_method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._grades_method.Entity = null;
						previousValue.grades_rules.Remove(this);
					}
					this._grades_method.Entity = value;
					if ((value != null))
					{
						value.grades_rules.Add(this);
						this._methodid = value.id;
					}
					else
					{
						this._methodid = default(int);
					}
					this.SendPropertyChanged("grades_method");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.students_disciplines")]
	public partial class students_discipline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _studentid;
		
		private int _points;
		
		private string _reason;
		
		private long _creator;
		
		private System.DateTime _created;
		
		private System.Nullable<int> _type;
		
		private EntityRef<conduct> _conduct;
		
		private EntityRef<user> _user;
		
		private EntityRef<user> _user1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void OnpointsChanging(int value);
    partial void OnpointsChanged();
    partial void OnreasonChanging(string value);
    partial void OnreasonChanged();
    partial void OncreatorChanging(long value);
    partial void OncreatorChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OntypeChanging(System.Nullable<int> value);
    partial void OntypeChanged();
    #endregion
		
		public students_discipline()
		{
			this._conduct = default(EntityRef<conduct>);
			this._user = default(EntityRef<user>);
			this._user1 = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_points", DbType="Int NOT NULL")]
		public int points
		{
			get
			{
				return this._points;
			}
			set
			{
				if ((this._points != value))
				{
					this.OnpointsChanging(value);
					this.SendPropertyChanging();
					this._points = value;
					this.SendPropertyChanged("points");
					this.OnpointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reason", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string reason
		{
			get
			{
				return this._reason;
			}
			set
			{
				if ((this._reason != value))
				{
					this.OnreasonChanging(value);
					this.SendPropertyChanging();
					this._reason = value;
					this.SendPropertyChanged("reason");
					this.OnreasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator", DbType="BigInt NOT NULL")]
		public long creator
		{
			get
			{
				return this._creator;
			}
			set
			{
				if ((this._creator != value))
				{
					if (this._user1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorChanging(value);
					this.SendPropertyChanging();
					this._creator = value;
					this.SendPropertyChanged("creator");
					this.OncreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int")]
		public System.Nullable<int> type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._conduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="conduct_students_discipline", Storage="_conduct", ThisKey="type", OtherKey="id", IsForeignKey=true)]
		public conduct conduct
		{
			get
			{
				return this._conduct.Entity;
			}
			set
			{
				conduct previousValue = this._conduct.Entity;
				if (((previousValue != value) 
							|| (this._conduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._conduct.Entity = null;
						previousValue.students_disciplines.Remove(this);
					}
					this._conduct.Entity = value;
					if ((value != null))
					{
						value.students_disciplines.Add(this);
						this._type = value.id;
					}
					else
					{
						this._type = default(Nullable<int>);
					}
					this.SendPropertyChanged("conduct");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_discipline", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.students_disciplines.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.students_disciplines.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_discipline1", Storage="_user1", ThisKey="creator", OtherKey="id", IsForeignKey=true)]
		public user user1
		{
			get
			{
				return this._user1.Entity;
			}
			set
			{
				user previousValue = this._user1.Entity;
				if (((previousValue != value) 
							|| (this._user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user1.Entity = null;
						previousValue.students_disciplines1.Remove(this);
					}
					this._user1.Entity = value;
					if ((value != null))
					{
						value.students_disciplines1.Add(this);
						this._creator = value.id;
					}
					else
					{
						this._creator = default(long);
					}
					this.SendPropertyChanged("user1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.conducts")]
	public partial class conduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<short> _min;
		
		private System.Nullable<short> _max;
		
		private bool _isdemerit;
		
		private EntitySet<students_discipline> _students_disciplines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnminChanging(System.Nullable<short> value);
    partial void OnminChanged();
    partial void OnmaxChanging(System.Nullable<short> value);
    partial void OnmaxChanged();
    partial void OnisdemeritChanging(bool value);
    partial void OnisdemeritChanged();
    #endregion
		
		public conduct()
		{
			this._students_disciplines = new EntitySet<students_discipline>(new Action<students_discipline>(this.attach_students_disciplines), new Action<students_discipline>(this.detach_students_disciplines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min", DbType="SmallInt")]
		public System.Nullable<short> min
		{
			get
			{
				return this._min;
			}
			set
			{
				if ((this._min != value))
				{
					this.OnminChanging(value);
					this.SendPropertyChanging();
					this._min = value;
					this.SendPropertyChanged("min");
					this.OnminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max", DbType="SmallInt")]
		public System.Nullable<short> max
		{
			get
			{
				return this._max;
			}
			set
			{
				if ((this._max != value))
				{
					this.OnmaxChanging(value);
					this.SendPropertyChanging();
					this._max = value;
					this.SendPropertyChanged("max");
					this.OnmaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isdemerit", DbType="Bit NOT NULL")]
		public bool isdemerit
		{
			get
			{
				return this._isdemerit;
			}
			set
			{
				if ((this._isdemerit != value))
				{
					this.OnisdemeritChanging(value);
					this.SendPropertyChanging();
					this._isdemerit = value;
					this.SendPropertyChanged("isdemerit");
					this.OnisdemeritChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="conduct_students_discipline", Storage="_students_disciplines", ThisKey="id", OtherKey="type")]
		public EntitySet<students_discipline> students_disciplines
		{
			get
			{
				return this._students_disciplines;
			}
			set
			{
				this._students_disciplines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_students_disciplines(students_discipline entity)
		{
			this.SendPropertyChanging();
			entity.conduct = this;
		}
		
		private void detach_students_disciplines(students_discipline entity)
		{
			this.SendPropertyChanging();
			entity.conduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<byte> _status;
		
		private string _email;
		
		private string _passwordhash;
		
		private string _designation;
		
		private string _name;
		
		private int _usergroup;
		
		private System.Nullable<long> _photo;
		
		private int _settings;
		
		private string _nric_new;
		
		private System.Nullable<System.DateTime> _dob;
		
		private string _race;
		
		private string _dialect;
		
		private string _gender;
		
		private string _pob;
		
		private string _citizenship;
		
		private string _birthcertno;
		
		private string _passportno;
		
		private System.Nullable<bool> _isbumi;
		
		private string _religion;
		
		private string _phone_home;
		
		private string _phone_cell;
		
		private string _address;
		
		private System.Nullable<int> _schoolid;
		
		private string _notes;
		
		private System.Nullable<System.DateTime> _updated;
		
		private string _marital_status;
		
		private long _permissions;
		
		private EntitySet<sibling> _siblings;
		
		private EntitySet<sibling> _siblings1;
		
		private EntitySet<user_file> _user_files;
		
		private EntitySet<feedback> _feedbacks;
		
		private EntitySet<registration_notification> _registration_notifications;
		
		private EntitySet<changelog> _changelogs;
		
		private EntitySet<students_guardian> _students_guardians;
		
		private EntitySet<students_guardian> _students_guardians1;
		
		private EntityRef<user_parent> _user_parents;
		
		private EntitySet<blog> _blogs;
		
		private EntitySet<registration> _registrations;
		
		private EntitySet<registration> _registrations1;
		
		private EntitySet<registration> _registrations2;
		
		private EntitySet<classes_teachers_allocated> _classes_teachers_allocateds;
		
		private EntitySet<classes_students_allocated> _classes_students_allocateds;
		
		private EntitySet<eca_student> _eca_students;
		
		private EntitySet<students_remark> _students_remarks;
		
		private EntitySet<exam_mark> _exam_marks;
		
		private EntityRef<user_staff> _user_staffs;
		
		private EntitySet<subject_teacher> _subject_teachers;
		
		private EntitySet<homework> _homeworks;
		
		private EntitySet<homework_student> _homework_students;
		
		private EntitySet<leaves_allocated> _leaves_allocateds;
		
		private EntitySet<leaves_taken> _leaves_takens;
		
		private EntitySet<employment> _employments;
		
		private EntitySet<exam_template> _exam_templates;
		
		private EntitySet<exam> _exams;
		
		private EntitySet<students_discipline> _students_disciplines;
		
		private EntitySet<students_discipline> _students_disciplines1;
		
		private EntitySet<attendance> _attendances;
		
		private EntitySet<fees_reminder> _fees_reminders;
		
		private EntitySet<fees_reminder> _fees_reminders1;
		
		private EntitySet<fee> _fees;
		
		private EntityRef<user_image> _user_image;
		
		private EntityRef<school> _school;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstatusChanging(System.Nullable<byte> value);
    partial void OnstatusChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordhashChanging(string value);
    partial void OnpasswordhashChanged();
    partial void OndesignationChanging(string value);
    partial void OndesignationChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnusergroupChanging(int value);
    partial void OnusergroupChanged();
    partial void OnphotoChanging(System.Nullable<long> value);
    partial void OnphotoChanged();
    partial void OnsettingsChanging(int value);
    partial void OnsettingsChanged();
    partial void Onnric_newChanging(string value);
    partial void Onnric_newChanged();
    partial void OndobChanging(System.Nullable<System.DateTime> value);
    partial void OndobChanged();
    partial void OnraceChanging(string value);
    partial void OnraceChanged();
    partial void OndialectChanging(string value);
    partial void OndialectChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnpobChanging(string value);
    partial void OnpobChanged();
    partial void OncitizenshipChanging(string value);
    partial void OncitizenshipChanged();
    partial void OnbirthcertnoChanging(string value);
    partial void OnbirthcertnoChanged();
    partial void OnpassportnoChanging(string value);
    partial void OnpassportnoChanged();
    partial void OnisbumiChanging(System.Nullable<bool> value);
    partial void OnisbumiChanged();
    partial void OnreligionChanging(string value);
    partial void OnreligionChanged();
    partial void Onphone_homeChanging(string value);
    partial void Onphone_homeChanged();
    partial void Onphone_cellChanging(string value);
    partial void Onphone_cellChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnschoolidChanging(System.Nullable<int> value);
    partial void OnschoolidChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    partial void OnupdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnupdatedChanged();
    partial void Onmarital_statusChanging(string value);
    partial void Onmarital_statusChanged();
    partial void OnpermissionsChanging(long value);
    partial void OnpermissionsChanged();
    #endregion
		
		public user()
		{
			this._siblings = new EntitySet<sibling>(new Action<sibling>(this.attach_siblings), new Action<sibling>(this.detach_siblings));
			this._siblings1 = new EntitySet<sibling>(new Action<sibling>(this.attach_siblings1), new Action<sibling>(this.detach_siblings1));
			this._user_files = new EntitySet<user_file>(new Action<user_file>(this.attach_user_files), new Action<user_file>(this.detach_user_files));
			this._feedbacks = new EntitySet<feedback>(new Action<feedback>(this.attach_feedbacks), new Action<feedback>(this.detach_feedbacks));
			this._registration_notifications = new EntitySet<registration_notification>(new Action<registration_notification>(this.attach_registration_notifications), new Action<registration_notification>(this.detach_registration_notifications));
			this._changelogs = new EntitySet<changelog>(new Action<changelog>(this.attach_changelogs), new Action<changelog>(this.detach_changelogs));
			this._students_guardians = new EntitySet<students_guardian>(new Action<students_guardian>(this.attach_students_guardians), new Action<students_guardian>(this.detach_students_guardians));
			this._students_guardians1 = new EntitySet<students_guardian>(new Action<students_guardian>(this.attach_students_guardians1), new Action<students_guardian>(this.detach_students_guardians1));
			this._user_parents = default(EntityRef<user_parent>);
			this._blogs = new EntitySet<blog>(new Action<blog>(this.attach_blogs), new Action<blog>(this.detach_blogs));
			this._registrations = new EntitySet<registration>(new Action<registration>(this.attach_registrations), new Action<registration>(this.detach_registrations));
			this._registrations1 = new EntitySet<registration>(new Action<registration>(this.attach_registrations1), new Action<registration>(this.detach_registrations1));
			this._registrations2 = new EntitySet<registration>(new Action<registration>(this.attach_registrations2), new Action<registration>(this.detach_registrations2));
			this._classes_teachers_allocateds = new EntitySet<classes_teachers_allocated>(new Action<classes_teachers_allocated>(this.attach_classes_teachers_allocateds), new Action<classes_teachers_allocated>(this.detach_classes_teachers_allocateds));
			this._classes_students_allocateds = new EntitySet<classes_students_allocated>(new Action<classes_students_allocated>(this.attach_classes_students_allocateds), new Action<classes_students_allocated>(this.detach_classes_students_allocateds));
			this._eca_students = new EntitySet<eca_student>(new Action<eca_student>(this.attach_eca_students), new Action<eca_student>(this.detach_eca_students));
			this._students_remarks = new EntitySet<students_remark>(new Action<students_remark>(this.attach_students_remarks), new Action<students_remark>(this.detach_students_remarks));
			this._exam_marks = new EntitySet<exam_mark>(new Action<exam_mark>(this.attach_exam_marks), new Action<exam_mark>(this.detach_exam_marks));
			this._user_staffs = default(EntityRef<user_staff>);
			this._subject_teachers = new EntitySet<subject_teacher>(new Action<subject_teacher>(this.attach_subject_teachers), new Action<subject_teacher>(this.detach_subject_teachers));
			this._homeworks = new EntitySet<homework>(new Action<homework>(this.attach_homeworks), new Action<homework>(this.detach_homeworks));
			this._homework_students = new EntitySet<homework_student>(new Action<homework_student>(this.attach_homework_students), new Action<homework_student>(this.detach_homework_students));
			this._leaves_allocateds = new EntitySet<leaves_allocated>(new Action<leaves_allocated>(this.attach_leaves_allocateds), new Action<leaves_allocated>(this.detach_leaves_allocateds));
			this._leaves_takens = new EntitySet<leaves_taken>(new Action<leaves_taken>(this.attach_leaves_takens), new Action<leaves_taken>(this.detach_leaves_takens));
			this._employments = new EntitySet<employment>(new Action<employment>(this.attach_employments), new Action<employment>(this.detach_employments));
			this._exam_templates = new EntitySet<exam_template>(new Action<exam_template>(this.attach_exam_templates), new Action<exam_template>(this.detach_exam_templates));
			this._exams = new EntitySet<exam>(new Action<exam>(this.attach_exams), new Action<exam>(this.detach_exams));
			this._students_disciplines = new EntitySet<students_discipline>(new Action<students_discipline>(this.attach_students_disciplines), new Action<students_discipline>(this.detach_students_disciplines));
			this._students_disciplines1 = new EntitySet<students_discipline>(new Action<students_discipline>(this.attach_students_disciplines1), new Action<students_discipline>(this.detach_students_disciplines1));
			this._attendances = new EntitySet<attendance>(new Action<attendance>(this.attach_attendances), new Action<attendance>(this.detach_attendances));
			this._fees_reminders = new EntitySet<fees_reminder>(new Action<fees_reminder>(this.attach_fees_reminders), new Action<fees_reminder>(this.detach_fees_reminders));
			this._fees_reminders1 = new EntitySet<fees_reminder>(new Action<fees_reminder>(this.attach_fees_reminders1), new Action<fees_reminder>(this.detach_fees_reminders1));
			this._fees = new EntitySet<fee>(new Action<fee>(this.attach_fees), new Action<fee>(this.detach_fees));
			this._user_image = default(EntityRef<user_image>);
			this._school = default(EntityRef<school>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt")]
		public System.Nullable<byte> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(320)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passwordhash", DbType="VarChar(128)")]
		public string passwordhash
		{
			get
			{
				return this._passwordhash;
			}
			set
			{
				if ((this._passwordhash != value))
				{
					this.OnpasswordhashChanging(value);
					this.SendPropertyChanging();
					this._passwordhash = value;
					this.SendPropertyChanged("passwordhash");
					this.OnpasswordhashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_designation", DbType="VarChar(10)")]
		public string designation
		{
			get
			{
				return this._designation;
			}
			set
			{
				if ((this._designation != value))
				{
					this.OndesignationChanging(value);
					this.SendPropertyChanging();
					this._designation = value;
					this.SendPropertyChanged("designation");
					this.OndesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usergroup", DbType="Int NOT NULL")]
		public int usergroup
		{
			get
			{
				return this._usergroup;
			}
			set
			{
				if ((this._usergroup != value))
				{
					this.OnusergroupChanging(value);
					this.SendPropertyChanging();
					this._usergroup = value;
					this.SendPropertyChanged("usergroup");
					this.OnusergroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo", DbType="BigInt")]
		public System.Nullable<long> photo
		{
			get
			{
				return this._photo;
			}
			set
			{
				if ((this._photo != value))
				{
					if (this._user_image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnphotoChanging(value);
					this.SendPropertyChanging();
					this._photo = value;
					this.SendPropertyChanged("photo");
					this.OnphotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_settings", DbType="Int NOT NULL")]
		public int settings
		{
			get
			{
				return this._settings;
			}
			set
			{
				if ((this._settings != value))
				{
					this.OnsettingsChanging(value);
					this.SendPropertyChanging();
					this._settings = value;
					this.SendPropertyChanged("settings");
					this.OnsettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nric_new", DbType="VarChar(50)")]
		public string nric_new
		{
			get
			{
				return this._nric_new;
			}
			set
			{
				if ((this._nric_new != value))
				{
					this.Onnric_newChanging(value);
					this.SendPropertyChanging();
					this._nric_new = value;
					this.SendPropertyChanged("nric_new");
					this.Onnric_newChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="Date")]
		public System.Nullable<System.DateTime> dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_race", DbType="VarChar(50)")]
		public string race
		{
			get
			{
				return this._race;
			}
			set
			{
				if ((this._race != value))
				{
					this.OnraceChanging(value);
					this.SendPropertyChanging();
					this._race = value;
					this.SendPropertyChanged("race");
					this.OnraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dialect", DbType="VarChar(20)")]
		public string dialect
		{
			get
			{
				return this._dialect;
			}
			set
			{
				if ((this._dialect != value))
				{
					this.OndialectChanging(value);
					this.SendPropertyChanging();
					this._dialect = value;
					this.SendPropertyChanged("dialect");
					this.OndialectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(6)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pob", DbType="NVarChar(50)")]
		public string pob
		{
			get
			{
				return this._pob;
			}
			set
			{
				if ((this._pob != value))
				{
					this.OnpobChanging(value);
					this.SendPropertyChanging();
					this._pob = value;
					this.SendPropertyChanged("pob");
					this.OnpobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_citizenship", DbType="NVarChar(50)")]
		public string citizenship
		{
			get
			{
				return this._citizenship;
			}
			set
			{
				if ((this._citizenship != value))
				{
					this.OncitizenshipChanging(value);
					this.SendPropertyChanging();
					this._citizenship = value;
					this.SendPropertyChanged("citizenship");
					this.OncitizenshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthcertno", DbType="VarChar(50)")]
		public string birthcertno
		{
			get
			{
				return this._birthcertno;
			}
			set
			{
				if ((this._birthcertno != value))
				{
					this.OnbirthcertnoChanging(value);
					this.SendPropertyChanging();
					this._birthcertno = value;
					this.SendPropertyChanged("birthcertno");
					this.OnbirthcertnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passportno", DbType="VarChar(50)")]
		public string passportno
		{
			get
			{
				return this._passportno;
			}
			set
			{
				if ((this._passportno != value))
				{
					this.OnpassportnoChanging(value);
					this.SendPropertyChanging();
					this._passportno = value;
					this.SendPropertyChanged("passportno");
					this.OnpassportnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isbumi", DbType="Bit")]
		public System.Nullable<bool> isbumi
		{
			get
			{
				return this._isbumi;
			}
			set
			{
				if ((this._isbumi != value))
				{
					this.OnisbumiChanging(value);
					this.SendPropertyChanging();
					this._isbumi = value;
					this.SendPropertyChanged("isbumi");
					this.OnisbumiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_religion", DbType="VarChar(20)")]
		public string religion
		{
			get
			{
				return this._religion;
			}
			set
			{
				if ((this._religion != value))
				{
					this.OnreligionChanging(value);
					this.SendPropertyChanging();
					this._religion = value;
					this.SendPropertyChanged("religion");
					this.OnreligionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_home", DbType="VarChar(50)")]
		public string phone_home
		{
			get
			{
				return this._phone_home;
			}
			set
			{
				if ((this._phone_home != value))
				{
					this.Onphone_homeChanging(value);
					this.SendPropertyChanging();
					this._phone_home = value;
					this.SendPropertyChanged("phone_home");
					this.Onphone_homeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_cell", DbType="VarChar(50)")]
		public string phone_cell
		{
			get
			{
				return this._phone_cell;
			}
			set
			{
				if ((this._phone_cell != value))
				{
					this.Onphone_cellChanging(value);
					this.SendPropertyChanging();
					this._phone_cell = value;
					this.SendPropertyChanged("phone_cell");
					this.Onphone_cellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(200)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int")]
		public System.Nullable<int> schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notes", DbType="NVarChar(3000)")]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> updated
		{
			get
			{
				return this._updated;
			}
			set
			{
				if ((this._updated != value))
				{
					this.OnupdatedChanging(value);
					this.SendPropertyChanging();
					this._updated = value;
					this.SendPropertyChanged("updated");
					this.OnupdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marital_status", DbType="VarChar(10)")]
		public string marital_status
		{
			get
			{
				return this._marital_status;
			}
			set
			{
				if ((this._marital_status != value))
				{
					this.Onmarital_statusChanging(value);
					this.SendPropertyChanging();
					this._marital_status = value;
					this.SendPropertyChanged("marital_status");
					this.Onmarital_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permissions", DbType="BigInt")]
		public long permissions
		{
			get
			{
				return this._permissions;
			}
			set
			{
				if ((this._permissions != value))
				{
					this.OnpermissionsChanging(value);
					this.SendPropertyChanging();
					this._permissions = value;
					this.SendPropertyChanged("permissions");
					this.OnpermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_sibling", Storage="_siblings", ThisKey="id", OtherKey="otherid")]
		public EntitySet<sibling> siblings
		{
			get
			{
				return this._siblings;
			}
			set
			{
				this._siblings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_sibling1", Storage="_siblings1", ThisKey="id", OtherKey="siblingid")]
		public EntitySet<sibling> siblings1
		{
			get
			{
				return this._siblings1;
			}
			set
			{
				this._siblings1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_file", Storage="_user_files", ThisKey="id", OtherKey="userid")]
		public EntitySet<user_file> user_files
		{
			get
			{
				return this._user_files;
			}
			set
			{
				this._user_files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_feedback", Storage="_feedbacks", ThisKey="id", OtherKey="creator")]
		public EntitySet<feedback> feedbacks
		{
			get
			{
				return this._feedbacks;
			}
			set
			{
				this._feedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_registration_notification", Storage="_registration_notifications", ThisKey="id", OtherKey="userid")]
		public EntitySet<registration_notification> registration_notifications
		{
			get
			{
				return this._registration_notifications;
			}
			set
			{
				this._registration_notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_changelog", Storage="_changelogs", ThisKey="id", OtherKey="userid")]
		public EntitySet<changelog> changelogs
		{
			get
			{
				return this._changelogs;
			}
			set
			{
				this._changelogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_guardian", Storage="_students_guardians", ThisKey="id", OtherKey="studentid")]
		public EntitySet<students_guardian> students_guardians
		{
			get
			{
				return this._students_guardians;
			}
			set
			{
				this._students_guardians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_guardian1", Storage="_students_guardians1", ThisKey="id", OtherKey="parentid")]
		public EntitySet<students_guardian> students_guardians1
		{
			get
			{
				return this._students_guardians1;
			}
			set
			{
				this._students_guardians1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_parent", Storage="_user_parents", ThisKey="id", OtherKey="userid", IsUnique=true, IsForeignKey=false)]
		public user_parent user_parents
		{
			get
			{
				return this._user_parents.Entity;
			}
			set
			{
				user_parent previousValue = this._user_parents.Entity;
				if (((previousValue != value) 
							|| (this._user_parents.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user_parents.Entity = null;
						previousValue.user = null;
					}
					this._user_parents.Entity = value;
					if ((value != null))
					{
						value.user = this;
					}
					this.SendPropertyChanged("user_parents");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_blog", Storage="_blogs", ThisKey="id", OtherKey="creator")]
		public EntitySet<blog> blogs
		{
			get
			{
				return this._blogs;
			}
			set
			{
				this._blogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_registration", Storage="_registrations", ThisKey="id", OtherKey="studentid")]
		public EntitySet<registration> registrations
		{
			get
			{
				return this._registrations;
			}
			set
			{
				this._registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_registration1", Storage="_registrations1", ThisKey="id", OtherKey="applicantid")]
		public EntitySet<registration> registrations1
		{
			get
			{
				return this._registrations1;
			}
			set
			{
				this._registrations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_registration2", Storage="_registrations2", ThisKey="id", OtherKey="reviewer")]
		public EntitySet<registration> registrations2
		{
			get
			{
				return this._registrations2;
			}
			set
			{
				this._registrations2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_classes_teachers_allocated", Storage="_classes_teachers_allocateds", ThisKey="id", OtherKey="teacherid")]
		public EntitySet<classes_teachers_allocated> classes_teachers_allocateds
		{
			get
			{
				return this._classes_teachers_allocateds;
			}
			set
			{
				this._classes_teachers_allocateds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_classes_students_allocated", Storage="_classes_students_allocateds", ThisKey="id", OtherKey="studentid")]
		public EntitySet<classes_students_allocated> classes_students_allocateds
		{
			get
			{
				return this._classes_students_allocateds;
			}
			set
			{
				this._classes_students_allocateds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_eca_student", Storage="_eca_students", ThisKey="id", OtherKey="studentid")]
		public EntitySet<eca_student> eca_students
		{
			get
			{
				return this._eca_students;
			}
			set
			{
				this._eca_students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_remark", Storage="_students_remarks", ThisKey="id", OtherKey="studentid")]
		public EntitySet<students_remark> students_remarks
		{
			get
			{
				return this._students_remarks;
			}
			set
			{
				this._students_remarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_exam_mark", Storage="_exam_marks", ThisKey="id", OtherKey="studentid")]
		public EntitySet<exam_mark> exam_marks
		{
			get
			{
				return this._exam_marks;
			}
			set
			{
				this._exam_marks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_staff", Storage="_user_staffs", ThisKey="id", OtherKey="userid", IsUnique=true, IsForeignKey=false)]
		public user_staff user_staffs
		{
			get
			{
				return this._user_staffs.Entity;
			}
			set
			{
				user_staff previousValue = this._user_staffs.Entity;
				if (((previousValue != value) 
							|| (this._user_staffs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user_staffs.Entity = null;
						previousValue.user = null;
					}
					this._user_staffs.Entity = value;
					if ((value != null))
					{
						value.user = this;
					}
					this.SendPropertyChanged("user_staffs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_subject_teacher", Storage="_subject_teachers", ThisKey="id", OtherKey="teacherid")]
		public EntitySet<subject_teacher> subject_teachers
		{
			get
			{
				return this._subject_teachers;
			}
			set
			{
				this._subject_teachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_homework", Storage="_homeworks", ThisKey="id", OtherKey="creator")]
		public EntitySet<homework> homeworks
		{
			get
			{
				return this._homeworks;
			}
			set
			{
				this._homeworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_homework_student", Storage="_homework_students", ThisKey="id", OtherKey="studentid")]
		public EntitySet<homework_student> homework_students
		{
			get
			{
				return this._homework_students;
			}
			set
			{
				this._homework_students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_leaves_allocated", Storage="_leaves_allocateds", ThisKey="id", OtherKey="staffid")]
		public EntitySet<leaves_allocated> leaves_allocateds
		{
			get
			{
				return this._leaves_allocateds;
			}
			set
			{
				this._leaves_allocateds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_leaves_taken", Storage="_leaves_takens", ThisKey="id", OtherKey="staffid")]
		public EntitySet<leaves_taken> leaves_takens
		{
			get
			{
				return this._leaves_takens;
			}
			set
			{
				this._leaves_takens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_employment", Storage="_employments", ThisKey="id", OtherKey="userid")]
		public EntitySet<employment> employments
		{
			get
			{
				return this._employments;
			}
			set
			{
				this._employments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_exam_template", Storage="_exam_templates", ThisKey="id", OtherKey="creator")]
		public EntitySet<exam_template> exam_templates
		{
			get
			{
				return this._exam_templates;
			}
			set
			{
				this._exam_templates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_exam", Storage="_exams", ThisKey="id", OtherKey="creator")]
		public EntitySet<exam> exams
		{
			get
			{
				return this._exams;
			}
			set
			{
				this._exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_discipline", Storage="_students_disciplines", ThisKey="id", OtherKey="studentid")]
		public EntitySet<students_discipline> students_disciplines
		{
			get
			{
				return this._students_disciplines;
			}
			set
			{
				this._students_disciplines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_students_discipline1", Storage="_students_disciplines1", ThisKey="id", OtherKey="creator")]
		public EntitySet<students_discipline> students_disciplines1
		{
			get
			{
				return this._students_disciplines1;
			}
			set
			{
				this._students_disciplines1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_attendance", Storage="_attendances", ThisKey="id", OtherKey="studentid")]
		public EntitySet<attendance> attendances
		{
			get
			{
				return this._attendances;
			}
			set
			{
				this._attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_fees_reminder", Storage="_fees_reminders", ThisKey="id", OtherKey="receiver")]
		public EntitySet<fees_reminder> fees_reminders
		{
			get
			{
				return this._fees_reminders;
			}
			set
			{
				this._fees_reminders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_fees_reminder1", Storage="_fees_reminders1", ThisKey="id", OtherKey="sender")]
		public EntitySet<fees_reminder> fees_reminders1
		{
			get
			{
				return this._fees_reminders1;
			}
			set
			{
				this._fees_reminders1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_fee", Storage="_fees", ThisKey="id", OtherKey="studentid")]
		public EntitySet<fee> fees
		{
			get
			{
				return this._fees;
			}
			set
			{
				this._fees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_image_user", Storage="_user_image", ThisKey="photo", OtherKey="id", IsForeignKey=true, DeleteRule="SET NULL")]
		public user_image user_image
		{
			get
			{
				return this._user_image.Entity;
			}
			set
			{
				user_image previousValue = this._user_image.Entity;
				if (((previousValue != value) 
							|| (this._user_image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user_image.Entity = null;
						previousValue.users.Remove(this);
					}
					this._user_image.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._photo = value.id;
					}
					else
					{
						this._photo = default(Nullable<long>);
					}
					this.SendPropertyChanged("user_image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_user", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.users.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(Nullable<int>);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_siblings(sibling entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_siblings(sibling entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_siblings1(sibling entity)
		{
			this.SendPropertyChanging();
			entity.user1 = this;
		}
		
		private void detach_siblings1(sibling entity)
		{
			this.SendPropertyChanging();
			entity.user1 = null;
		}
		
		private void attach_user_files(user_file entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_user_files(user_file entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_feedbacks(feedback entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_feedbacks(feedback entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_registration_notifications(registration_notification entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_registration_notifications(registration_notification entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_changelogs(changelog entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_changelogs(changelog entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_students_guardians(students_guardian entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_students_guardians(students_guardian entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_students_guardians1(students_guardian entity)
		{
			this.SendPropertyChanging();
			entity.user1 = this;
		}
		
		private void detach_students_guardians1(students_guardian entity)
		{
			this.SendPropertyChanging();
			entity.user1 = null;
		}
		
		private void attach_blogs(blog entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_blogs(blog entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_registrations(registration entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_registrations(registration entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_registrations1(registration entity)
		{
			this.SendPropertyChanging();
			entity.user1 = this;
		}
		
		private void detach_registrations1(registration entity)
		{
			this.SendPropertyChanging();
			entity.user1 = null;
		}
		
		private void attach_registrations2(registration entity)
		{
			this.SendPropertyChanging();
			entity.user2 = this;
		}
		
		private void detach_registrations2(registration entity)
		{
			this.SendPropertyChanging();
			entity.user2 = null;
		}
		
		private void attach_classes_teachers_allocateds(classes_teachers_allocated entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_classes_teachers_allocateds(classes_teachers_allocated entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_classes_students_allocateds(classes_students_allocated entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_classes_students_allocateds(classes_students_allocated entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_eca_students(eca_student entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_eca_students(eca_student entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_students_remarks(students_remark entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_students_remarks(students_remark entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_exam_marks(exam_mark entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_exam_marks(exam_mark entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_subject_teachers(subject_teacher entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_subject_teachers(subject_teacher entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_homeworks(homework entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_homeworks(homework entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_homework_students(homework_student entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_homework_students(homework_student entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_leaves_allocateds(leaves_allocated entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_leaves_allocateds(leaves_allocated entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_leaves_takens(leaves_taken entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_leaves_takens(leaves_taken entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_employments(employment entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_employments(employment entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_exam_templates(exam_template entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_exam_templates(exam_template entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_exams(exam entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_exams(exam entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_students_disciplines(students_discipline entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_students_disciplines(students_discipline entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_students_disciplines1(students_discipline entity)
		{
			this.SendPropertyChanging();
			entity.user1 = this;
		}
		
		private void detach_students_disciplines1(students_discipline entity)
		{
			this.SendPropertyChanging();
			entity.user1 = null;
		}
		
		private void attach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_fees_reminders(fees_reminder entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_fees_reminders(fees_reminder entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_fees_reminders1(fees_reminder entity)
		{
			this.SendPropertyChanging();
			entity.user1 = this;
		}
		
		private void detach_fees_reminders1(fees_reminder entity)
		{
			this.SendPropertyChanging();
			entity.user1 = null;
		}
		
		private void attach_fees(fee entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_fees(fee entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.attendances")]
	public partial class attendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<int> _classid;
		
		private System.Nullable<int> _ecaid;
		
		private System.DateTime _date;
		
		private long _studentid;
		
		private string _reason;
		
		private string _status;
		
		private System.Nullable<long> _creator;
		
		private EntityRef<eca> _eca;
		
		private EntityRef<school_class> _school_class;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnclassidChanging(System.Nullable<int> value);
    partial void OnclassidChanged();
    partial void OnecaidChanging(System.Nullable<int> value);
    partial void OnecaidChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void OnreasonChanging(string value);
    partial void OnreasonChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OncreatorChanging(System.Nullable<long> value);
    partial void OncreatorChanged();
    #endregion
		
		public attendance()
		{
			this._eca = default(EntityRef<eca>);
			this._school_class = default(EntityRef<school_class>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classid", DbType="Int")]
		public System.Nullable<int> classid
		{
			get
			{
				return this._classid;
			}
			set
			{
				if ((this._classid != value))
				{
					if (this._school_class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassidChanging(value);
					this.SendPropertyChanging();
					this._classid = value;
					this.SendPropertyChanged("classid");
					this.OnclassidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ecaid", DbType="Int")]
		public System.Nullable<int> ecaid
		{
			get
			{
				return this._ecaid;
			}
			set
			{
				if ((this._ecaid != value))
				{
					if (this._eca.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnecaidChanging(value);
					this.SendPropertyChanging();
					this._ecaid = value;
					this.SendPropertyChanged("ecaid");
					this.OnecaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reason", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string reason
		{
			get
			{
				return this._reason;
			}
			set
			{
				if ((this._reason != value))
				{
					this.OnreasonChanging(value);
					this.SendPropertyChanging();
					this._reason = value;
					this.SendPropertyChanged("reason");
					this.OnreasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator", DbType="BigInt")]
		public System.Nullable<long> creator
		{
			get
			{
				return this._creator;
			}
			set
			{
				if ((this._creator != value))
				{
					this.OncreatorChanging(value);
					this.SendPropertyChanging();
					this._creator = value;
					this.SendPropertyChanged("creator");
					this.OncreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eca_attendance", Storage="_eca", ThisKey="ecaid", OtherKey="id", IsForeignKey=true)]
		public eca eca
		{
			get
			{
				return this._eca.Entity;
			}
			set
			{
				eca previousValue = this._eca.Entity;
				if (((previousValue != value) 
							|| (this._eca.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._eca.Entity = null;
						previousValue.attendances.Remove(this);
					}
					this._eca.Entity = value;
					if ((value != null))
					{
						value.attendances.Add(this);
						this._ecaid = value.id;
					}
					else
					{
						this._ecaid = default(Nullable<int>);
					}
					this.SendPropertyChanged("eca");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_class_attendance", Storage="_school_class", ThisKey="classid", OtherKey="id", IsForeignKey=true)]
		public school_class school_class
		{
			get
			{
				return this._school_class.Entity;
			}
			set
			{
				school_class previousValue = this._school_class.Entity;
				if (((previousValue != value) 
							|| (this._school_class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school_class.Entity = null;
						previousValue.attendances.Remove(this);
					}
					this._school_class.Entity = value;
					if ((value != null))
					{
						value.attendances.Add(this);
						this._classid = value.id;
					}
					else
					{
						this._classid = default(Nullable<int>);
					}
					this.SendPropertyChanged("school_class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_attendance", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.attendances.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.attendances.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.fees_types")]
	public partial class fees_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _schoolid;
		
		private decimal _amount;
		
		private EntitySet<fee> _fees;
		
		private EntityRef<school> _school;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnschoolidChanging(int value);
    partial void OnschoolidChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    #endregion
		
		public fees_type()
		{
			this._fees = new EntitySet<fee>(new Action<fee>(this.attach_fees), new Action<fee>(this.detach_fees));
			this._school = default(EntityRef<school>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolid", DbType="Int NOT NULL")]
		public int schoolid
		{
			get
			{
				return this._schoolid;
			}
			set
			{
				if ((this._schoolid != value))
				{
					if (this._school.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolidChanging(value);
					this.SendPropertyChanging();
					this._schoolid = value;
					this.SendPropertyChanged("schoolid");
					this.OnschoolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Money NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="fees_type_fee", Storage="_fees", ThisKey="id", OtherKey="typeid")]
		public EntitySet<fee> fees
		{
			get
			{
				return this._fees;
			}
			set
			{
				this._fees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="school_fees_type", Storage="_school", ThisKey="schoolid", OtherKey="id", IsForeignKey=true)]
		public school school
		{
			get
			{
				return this._school.Entity;
			}
			set
			{
				school previousValue = this._school.Entity;
				if (((previousValue != value) 
							|| (this._school.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._school.Entity = null;
						previousValue.fees_types.Remove(this);
					}
					this._school.Entity = value;
					if ((value != null))
					{
						value.fees_types.Add(this);
						this._schoolid = value.id;
					}
					else
					{
						this._schoolid = default(int);
					}
					this.SendPropertyChanged("school");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_fees(fee entity)
		{
			this.SendPropertyChanging();
			entity.fees_type = this;
		}
		
		private void detach_fees(fee entity)
		{
			this.SendPropertyChanging();
			entity.fees_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.fees_templates")]
	public partial class fees_template : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _title;
		
		private string _body;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    #endregion
		
		public fees_template()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_body", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.fees_reminders")]
	public partial class fees_reminder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _templatename;
		
		private System.DateTime _created;
		
		private System.DateTime _paymentdue;
		
		private long _receiver;
		
		private long _sender;
		
		private long _feeid;
		
		private string _uniqueid;
		
		private bool _viewed;
		
		private string _reference;
		
		private EntityRef<user> _user;
		
		private EntityRef<user> _user1;
		
		private EntityRef<fee> _fee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntemplatenameChanging(string value);
    partial void OntemplatenameChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnpaymentdueChanging(System.DateTime value);
    partial void OnpaymentdueChanged();
    partial void OnreceiverChanging(long value);
    partial void OnreceiverChanged();
    partial void OnsenderChanging(long value);
    partial void OnsenderChanged();
    partial void OnfeeidChanging(long value);
    partial void OnfeeidChanged();
    partial void OnuniqueidChanging(string value);
    partial void OnuniqueidChanged();
    partial void OnviewedChanging(bool value);
    partial void OnviewedChanged();
    partial void OnreferenceChanging(string value);
    partial void OnreferenceChanged();
    #endregion
		
		public fees_reminder()
		{
			this._user = default(EntityRef<user>);
			this._user1 = default(EntityRef<user>);
			this._fee = default(EntityRef<fee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_templatename", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string templatename
		{
			get
			{
				return this._templatename;
			}
			set
			{
				if ((this._templatename != value))
				{
					this.OntemplatenameChanging(value);
					this.SendPropertyChanging();
					this._templatename = value;
					this.SendPropertyChanged("templatename");
					this.OntemplatenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentdue", DbType="DateTime NOT NULL")]
		public System.DateTime paymentdue
		{
			get
			{
				return this._paymentdue;
			}
			set
			{
				if ((this._paymentdue != value))
				{
					this.OnpaymentdueChanging(value);
					this.SendPropertyChanging();
					this._paymentdue = value;
					this.SendPropertyChanged("paymentdue");
					this.OnpaymentdueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_receiver", DbType="BigInt NOT NULL")]
		public long receiver
		{
			get
			{
				return this._receiver;
			}
			set
			{
				if ((this._receiver != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreceiverChanging(value);
					this.SendPropertyChanging();
					this._receiver = value;
					this.SendPropertyChanged("receiver");
					this.OnreceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sender", DbType="BigInt NOT NULL")]
		public long sender
		{
			get
			{
				return this._sender;
			}
			set
			{
				if ((this._sender != value))
				{
					if (this._user1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsenderChanging(value);
					this.SendPropertyChanging();
					this._sender = value;
					this.SendPropertyChanged("sender");
					this.OnsenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feeid", DbType="BigInt NOT NULL")]
		public long feeid
		{
			get
			{
				return this._feeid;
			}
			set
			{
				if ((this._feeid != value))
				{
					if (this._fee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfeeidChanging(value);
					this.SendPropertyChanging();
					this._feeid = value;
					this.SendPropertyChanged("feeid");
					this.OnfeeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uniqueid", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string uniqueid
		{
			get
			{
				return this._uniqueid;
			}
			set
			{
				if ((this._uniqueid != value))
				{
					this.OnuniqueidChanging(value);
					this.SendPropertyChanging();
					this._uniqueid = value;
					this.SendPropertyChanged("uniqueid");
					this.OnuniqueidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewed", DbType="Bit NOT NULL")]
		public bool viewed
		{
			get
			{
				return this._viewed;
			}
			set
			{
				if ((this._viewed != value))
				{
					this.OnviewedChanging(value);
					this.SendPropertyChanging();
					this._viewed = value;
					this.SendPropertyChanged("viewed");
					this.OnviewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reference", DbType="NVarChar(50)")]
		public string reference
		{
			get
			{
				return this._reference;
			}
			set
			{
				if ((this._reference != value))
				{
					this.OnreferenceChanging(value);
					this.SendPropertyChanging();
					this._reference = value;
					this.SendPropertyChanged("reference");
					this.OnreferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_fees_reminder", Storage="_user", ThisKey="receiver", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.fees_reminders.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.fees_reminders.Add(this);
						this._receiver = value.id;
					}
					else
					{
						this._receiver = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_fees_reminder1", Storage="_user1", ThisKey="sender", OtherKey="id", IsForeignKey=true)]
		public user user1
		{
			get
			{
				return this._user1.Entity;
			}
			set
			{
				user previousValue = this._user1.Entity;
				if (((previousValue != value) 
							|| (this._user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user1.Entity = null;
						previousValue.fees_reminders1.Remove(this);
					}
					this._user1.Entity = value;
					if ((value != null))
					{
						value.fees_reminders1.Add(this);
						this._sender = value.id;
					}
					else
					{
						this._sender = default(long);
					}
					this.SendPropertyChanged("user1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="fee_fees_reminder", Storage="_fee", ThisKey="feeid", OtherKey="id", IsForeignKey=true)]
		public fee fee
		{
			get
			{
				return this._fee.Entity;
			}
			set
			{
				fee previousValue = this._fee.Entity;
				if (((previousValue != value) 
							|| (this._fee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._fee.Entity = null;
						previousValue.fees_reminders.Remove(this);
					}
					this._fee.Entity = value;
					if ((value != null))
					{
						value.fees_reminders.Add(this);
						this._feeid = value.id;
					}
					else
					{
						this._feeid = default(long);
					}
					this.SendPropertyChanged("fee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.fees")]
	public partial class fee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private System.Nullable<int> _typeid;
		
		private long _studentid;
		
		private string _status;
		
		private decimal _amount;
		
		private System.DateTime _duedate;
		
		private EntitySet<fees_reminder> _fees_reminders;
		
		private EntityRef<fees_type> _fees_type;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeidChanging(System.Nullable<int> value);
    partial void OntypeidChanged();
    partial void OnstudentidChanging(long value);
    partial void OnstudentidChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    partial void OnduedateChanging(System.DateTime value);
    partial void OnduedateChanged();
    #endregion
		
		public fee()
		{
			this._fees_reminders = new EntitySet<fees_reminder>(new Action<fees_reminder>(this.attach_fees_reminders), new Action<fees_reminder>(this.detach_fees_reminders));
			this._fees_type = default(EntityRef<fees_type>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeid", DbType="Int")]
		public System.Nullable<int> typeid
		{
			get
			{
				return this._typeid;
			}
			set
			{
				if ((this._typeid != value))
				{
					if (this._fees_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeidChanging(value);
					this.SendPropertyChanging();
					this._typeid = value;
					this.SendPropertyChanged("typeid");
					this.OntypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="BigInt NOT NULL")]
		public long studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Money NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duedate", DbType="DateTime NOT NULL")]
		public System.DateTime duedate
		{
			get
			{
				return this._duedate;
			}
			set
			{
				if ((this._duedate != value))
				{
					this.OnduedateChanging(value);
					this.SendPropertyChanging();
					this._duedate = value;
					this.SendPropertyChanged("duedate");
					this.OnduedateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="fee_fees_reminder", Storage="_fees_reminders", ThisKey="id", OtherKey="feeid")]
		public EntitySet<fees_reminder> fees_reminders
		{
			get
			{
				return this._fees_reminders;
			}
			set
			{
				this._fees_reminders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="fees_type_fee", Storage="_fees_type", ThisKey="typeid", OtherKey="id", IsForeignKey=true)]
		public fees_type fees_type
		{
			get
			{
				return this._fees_type.Entity;
			}
			set
			{
				fees_type previousValue = this._fees_type.Entity;
				if (((previousValue != value) 
							|| (this._fees_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._fees_type.Entity = null;
						previousValue.fees.Remove(this);
					}
					this._fees_type.Entity = value;
					if ((value != null))
					{
						value.fees.Add(this);
						this._typeid = value.id;
					}
					else
					{
						this._typeid = default(Nullable<int>);
					}
					this.SendPropertyChanged("fees_type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_fee", Storage="_user", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.fees.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.fees.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_fees_reminders(fees_reminder entity)
		{
			this.SendPropertyChanging();
			entity.fee = this;
		}
		
		private void detach_fees_reminders(fees_reminder entity)
		{
			this.SendPropertyChanging();
			entity.fee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.calendar")]
	public partial class calendar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _date;
		
		private string _details;
		
		private bool _isHoliday;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OndetailsChanging(string value);
    partial void OndetailsChanged();
    partial void OnisHolidayChanging(bool value);
    partial void OnisHolidayChanged();
    #endregion
		
		public calendar()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_details", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string details
		{
			get
			{
				return this._details;
			}
			set
			{
				if ((this._details != value))
				{
					this.OndetailsChanging(value);
					this.SendPropertyChanging();
					this._details = value;
					this.SendPropertyChanged("details");
					this.OndetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isHoliday", DbType="Bit NOT NULL")]
		public bool isHoliday
		{
			get
			{
				return this._isHoliday;
			}
			set
			{
				if ((this._isHoliday != value))
				{
					this.OnisHolidayChanging(value);
					this.SendPropertyChanging();
					this._isHoliday = value;
					this.SendPropertyChanged("isHoliday");
					this.OnisHolidayChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
